(()=>{"use strict";var n={426:(n,t,e)=>{e.d(t,{Z:()=>s});var r=e(537),o=e.n(r),i=e(645),a=e.n(i)()(o());a.push([n.id,"body {\n    font-family: Arial, Helvetica, sans-serif;\n}\n\n#title {\n    margin: 30px 50px;\n}\n\n#title > h1 {\n    font-size: 3.2rem;\n    margin: 0;\n}\n\n#title > p {\n    margin: 0 3px 0;\n}\n\n.cell-content {\n    width: 28px;\n    height: 28px;\n    z-index: 1;\n    background-color: #E5F3FF;\n}\n\n.cell-content:hover {\n    background-color: white;\n}\n\n.drag {\n    border: 2px solid #1490FD;\n    position: absolute;\n    z-index: 2;\n    margin: -2px;\n    background-color: #C8E4FD;\n}\n\n.drag:hover {\n    cursor: move;\n}\n\ntable {\n    margin: 50px auto 30px auto;\n    border-collapse: collapse;\n}\n\n.active, .adjacent {\n    background-color: white;\n}\n\ntd {\n    border: 1px solid #C8E4FD;\n}\n\n#selection {\n    display: flex;\n    justify-content: center;\n    gap: 30px;\n    width: 320px;\n    height: 40px;\n    margin: auto;\n}\n\nbutton {\n    border: none;\n    border-radius: 0;\n    padding: 10px;\n\n}","",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAAA;IACI,yCAAyC;AAC7C;;AAEA;IACI,iBAAiB;AACrB;;AAEA;IACI,iBAAiB;IACjB,SAAS;AACb;;AAEA;IACI,eAAe;AACnB;;AAEA;IACI,WAAW;IACX,YAAY;IACZ,UAAU;IACV,yBAAyB;AAC7B;;AAEA;IACI,uBAAuB;AAC3B;;AAEA;IACI,yBAAyB;IACzB,kBAAkB;IAClB,UAAU;IACV,YAAY;IACZ,yBAAyB;AAC7B;;AAEA;IACI,YAAY;AAChB;;AAEA;IACI,2BAA2B;IAC3B,yBAAyB;AAC7B;;AAEA;IACI,uBAAuB;AAC3B;;AAEA;IACI,yBAAyB;AAC7B;;AAEA;IACI,aAAa;IACb,uBAAuB;IACvB,SAAS;IACT,YAAY;IACZ,YAAY;IACZ,YAAY;AAChB;;AAEA;IACI,YAAY;IACZ,gBAAgB;IAChB,aAAa;;AAEjB",sourcesContent:["body {\n    font-family: Arial, Helvetica, sans-serif;\n}\n\n#title {\n    margin: 30px 50px;\n}\n\n#title > h1 {\n    font-size: 3.2rem;\n    margin: 0;\n}\n\n#title > p {\n    margin: 0 3px 0;\n}\n\n.cell-content {\n    width: 28px;\n    height: 28px;\n    z-index: 1;\n    background-color: #E5F3FF;\n}\n\n.cell-content:hover {\n    background-color: white;\n}\n\n.drag {\n    border: 2px solid #1490FD;\n    position: absolute;\n    z-index: 2;\n    margin: -2px;\n    background-color: #C8E4FD;\n}\n\n.drag:hover {\n    cursor: move;\n}\n\ntable {\n    margin: 50px auto 30px auto;\n    border-collapse: collapse;\n}\n\n.active, .adjacent {\n    background-color: white;\n}\n\ntd {\n    border: 1px solid #C8E4FD;\n}\n\n#selection {\n    display: flex;\n    justify-content: center;\n    gap: 30px;\n    width: 320px;\n    height: 40px;\n    margin: auto;\n}\n\nbutton {\n    border: none;\n    border-radius: 0;\n    padding: 10px;\n\n}"],sourceRoot:""}]);const s=a},645:n=>{n.exports=function(n){var t=[];return t.toString=function(){return this.map((function(t){var e="",r=void 0!==t[5];return t[4]&&(e+="@supports (".concat(t[4],") {")),t[2]&&(e+="@media ".concat(t[2]," {")),r&&(e+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),e+=n(t),r&&(e+="}"),t[2]&&(e+="}"),t[4]&&(e+="}"),e})).join("")},t.i=function(n,e,r,o,i){"string"==typeof n&&(n=[[null,n,void 0]]);var a={};if(r)for(var s=0;s<this.length;s++){var c=this[s][0];null!=c&&(a[c]=!0)}for(var u=0;u<n.length;u++){var l=[].concat(n[u]);r&&a[l[0]]||(void 0!==i&&(void 0===l[5]||(l[1]="@layer".concat(l[5].length>0?" ".concat(l[5]):""," {").concat(l[1],"}")),l[5]=i),e&&(l[2]?(l[1]="@media ".concat(l[2]," {").concat(l[1],"}"),l[2]=e):l[2]=e),o&&(l[4]?(l[1]="@supports (".concat(l[4],") {").concat(l[1],"}"),l[4]=o):l[4]="".concat(o)),t.push(l))}},t}},537:n=>{n.exports=function(n){var t=n[1],e=n[3];if(!e)return t;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(e)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),i="/*# ".concat(o," */"),a=e.sources.map((function(n){return"/*# sourceURL=".concat(e.sourceRoot||"").concat(n," */")}));return[t].concat(a).concat([i]).join("\n")}return[t].join("\n")}},379:n=>{var t=[];function e(n){for(var e=-1,r=0;r<t.length;r++)if(t[r].identifier===n){e=r;break}return e}function r(n,r){for(var i={},a=[],s=0;s<n.length;s++){var c=n[s],u=r.base?c[0]+r.base:c[0],l=i[u]||0,p="".concat(u," ").concat(l);i[u]=l+1;var d=e(p),h={css:c[1],media:c[2],sourceMap:c[3],supports:c[4],layer:c[5]};if(-1!==d)t[d].references++,t[d].updater(h);else{var A=o(h,r);r.byIndex=s,t.splice(s,0,{identifier:p,updater:A,references:1})}a.push(p)}return a}function o(n,t){var e=t.domAPI(t);return e.update(n),function(t){if(t){if(t.css===n.css&&t.media===n.media&&t.sourceMap===n.sourceMap&&t.supports===n.supports&&t.layer===n.layer)return;e.update(n=t)}else e.remove()}}n.exports=function(n,o){var i=r(n=n||[],o=o||{});return function(n){n=n||[];for(var a=0;a<i.length;a++){var s=e(i[a]);t[s].references--}for(var c=r(n,o),u=0;u<i.length;u++){var l=e(i[u]);0===t[l].references&&(t[l].updater(),t.splice(l,1))}i=c}}},569:n=>{var t={};n.exports=function(n,e){var r=function(n){if(void 0===t[n]){var e=document.querySelector(n);if(window.HTMLIFrameElement&&e instanceof window.HTMLIFrameElement)try{e=e.contentDocument.head}catch(n){e=null}t[n]=e}return t[n]}(n);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(e)}},216:n=>{n.exports=function(n){var t=document.createElement("style");return n.setAttributes(t,n.attributes),n.insert(t,n.options),t}},565:(n,t,e)=>{n.exports=function(n){var t=e.nc;t&&n.setAttribute("nonce",t)}},795:n=>{n.exports=function(n){var t=n.insertStyleElement(n);return{update:function(e){!function(n,t,e){var r="";e.supports&&(r+="@supports (".concat(e.supports,") {")),e.media&&(r+="@media ".concat(e.media," {"));var o=void 0!==e.layer;o&&(r+="@layer".concat(e.layer.length>0?" ".concat(e.layer):""," {")),r+=e.css,o&&(r+="}"),e.media&&(r+="}"),e.supports&&(r+="}");var i=e.sourceMap;i&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),t.styleTagTransform(r,n,t.options)}(t,n,e)},remove:function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(t)}}}},589:n=>{n.exports=function(n,t){if(t.styleSheet)t.styleSheet.cssText=n;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(n))}}}},t={};function e(r){var o=t[r];if(void 0!==o)return o.exports;var i=t[r]={id:r,exports:{}};return n[r](i,i.exports,e),i.exports}e.n=n=>{var t=n&&n.__esModule?()=>n.default:()=>n;return e.d(t,{a:t}),t},e.d=(n,t)=>{for(var r in t)e.o(t,r)&&!e.o(n,r)&&Object.defineProperty(n,r,{enumerable:!0,get:t[r]})},e.o=(n,t)=>Object.prototype.hasOwnProperty.call(n,t),e.nc=void 0,(()=>{function n(n){return Math.floor(Math.random()*n)}function t(t,e){return[n(t),n(e)]}function r(n,t){let e=[];const r=Math.abs(n[0]-t[0]+n[1]-t[1])+1,i=function(n,t){const e=[];if(1==r)return[n];if(n[0]==t[0])if(n[1]>t[1])for(let r=t[1];r<=n[1];r++)e.push([n[0],r]);else for(let r=n[1];r<=t[1];r++)e.push([n[0],r]);else if(n[0]>t[0])for(let r=t[0];r<=n[0];r++)e.push([r,n[1]]);else for(let r=n[0];r<=t[0];r++)e.push([r,n[1]]);return e}(n,t);function a(){return 1==r||n[0]==t[0]?1:0}const s=a(),c=function(){i.sort();const n=i[0],t=i[r-1];let e=[];return 0==a()?(e.push([n[0]-1,n[1]]),e.push([n[0]-1,n[1]-1]),e.push([n[0]-1,n[1]+1]),e.push([t[0]+1,t[1]]),e.push([t[0]+1,t[1]-1]),e.push([t[0]+1,t[1]+1]),i.forEach((n=>{e.push([n[0],n[1]+1]),e.push([n[0],n[1]-1])})),e):(e.push([n[0],n[1]-1]),e.push([n[0]-1,n[1]-1]),e.push([n[0]+1,n[1]-1]),e.push([t[0],t[1]+1]),e.push([t[0]-1,t[1]+1]),e.push([t[0]+1,t[1]+1]),i.forEach((n=>{e.push([n[0]+1,n[1]]),e.push([n[0]-1,n[1]])})),e)}();return{length:r,hitPoints:i,hits:e,adjacent:c,orientation:s,rotate:function(){return o(n,r,0==s?1:0)},isSunk:function(){return e.length==r},hit:function(n){const t=n.toString();for(let r=0;r<i.length;r++)if(i[r].toString()==t)return e.push(n),!0;return!1}}}function o(n,t,e){let o=[];return 0==e?(o.push(n[0]+t-1),o.push(n[1]),r(n,o)):(o.push(n[0]),o.push(n[1]+t-1),r(n,o))}function i(n){n.adjacent.forEach((n=>{let t=n[0],e=n[1];t>=0&&t<=9&&e>=0&&e<=9&&document.querySelector(`[x='${t}'][y='${e}']`).classList.add("adjacent")}))}function a(n){n.adjacent.forEach((n=>{let t=n[0],e=n[1];t>=0&&t<=9&&e>=0&&e<=9&&document.querySelector(`[x='${t}'][y='${e}']`).classList.remove("adjacent")})),n.hitPoints.forEach((n=>{let t=n[0],e=n[1];document.querySelector(`[x='${t}'][y='${e}']`).classList.remove("active")}))}function s(n){n.adjacent.forEach((n=>{let t=n[0],e=n[1];t>=0&&t<=9&&e>=0&&e<=9&&document.querySelector(`[x='${t}'][y='${e}']`).classList.add("adjacent")})),n.hitPoints.forEach((n=>{let t=n[0],e=n[1];document.querySelector(`[x='${t}'][y='${e}']`).classList.add("active")}))}var c=e(379),u=e.n(c),l=e(795),p=e.n(l),d=e(569),h=e.n(d),A=e(565),f=e.n(A),g=e(216),m=e.n(g),v=e(589),y=e.n(v),x=e(426),b={};b.styleTagTransform=y(),b.setAttributes=f(),b.insert=h().bind(null,"head"),b.domAPI=p(),b.insertStyleElement=m(),u()(x.Z,b),x.Z&&x.Z.locals&&x.Z.locals;const C=function(){let e=[],o=[],i=[],a=[],s=[];function c(n,e){if(0==e){const e=t(9-n,9),o=[];return o.push(e[0]+n-1),o.push(e[1]),r(e,o)}const o=t(9,9-n),i=[];return i.push(o[0]),i.push(o[1]+n-1),r(o,i)}function u(n){return!!function(n){for(let t=0;t<n.length;t++){if(o.some((e=>e.toString()==n.hitPoints[t].toString())))return!1;if(i.some((e=>e.toString()==n.hitPoints[t].toString())))return!1}for(let t=0;t<n.length;t++)if(n.hitPoints[t].some((n=>n<0||n>9)))return!1;return!0}(n)&&(function(n){n.hitPoints.forEach((n=>{o.push(n)})),n.adjacent.forEach((n=>{i.push(n)})),e.push(n)}(n),!0)}function l(n){return e.find((t=>t.hitPoints.find((t=>t.toString()==n.toString()))))}function p(n){return e.findIndex((t=>t.hitPoints.find((t=>t.toString()==n.toString()))))}return{ships:e,shipsC:o,hits:s,misses:a,adjacent:i,placeValidShip:u,findShip:l,findShipIndex:p,removeShip:function(n){const t=p(n),r=l(n);return e.splice(t,1),function(n){n.adjacent.forEach((n=>{let t=i.findIndex((t=>t.toString()==n.toString()));i.splice(t,1)}))}(r),function(n){n.hitPoints.forEach((n=>{let t=o.findIndex((t=>t.toString()==n.toString()));o.splice(t,1)}))}(r),r},nRandomShips:function(t,r){const o=e.length+t;for(;e.length<o;)u(c(r,n(2)))},randomShip:c,sunkAll:function(){return s.length==o.length},receiveAttack:function(n){for(let t=0;t<e.length;t++)if(e[t].hit(n))return void s.push(n);a.push(n)}}}();var I;C.nRandomShips(1,4),C.nRandomShips(2,3),C.nRandomShips(3,2),C.nRandomShips(4,1),function(n){n.shipsC.forEach((n=>{let t=n[0],e=n[1];document.querySelector(`[x='${t}'][y='${e}']`).classList.add("active")}))}(I=C),i(I),function(n){n.ships.forEach((n=>{n.hitPoints.sort();let t=n.hitPoints[0][0],e=n.hitPoints[0][1];const r=30*n.length,o=n.orientation,i=document.querySelector(`[x='${t}'][y='${e}']`),a=document.createElement("div");a.classList.add("drag"),a.setAttribute("draggable","true"),a.setAttribute("orientation",`${n.orientation}`),a.setAttribute("length",`${n.length}`),0==o?(a.style.width=`${r}px`,a.style.height="28px"):(a.style.height=`${r}px`,a.style.width="28px"),i.appendChild(a)}))}(I),function(n){let t=null,e=null;document.addEventListener("dragstart",(r=>{t=r.target;let o=parseInt(t.parentNode.getAttribute("x")),s=parseInt(t.parentNode.getAttribute("y"));e=n.removeShip([o,s]),a(e),i(n)})),document.addEventListener("dragover",(n=>{n.preventDefault()})),document.addEventListener("drop",(r=>{r.preventDefault();let i=r.target;"drag"==i.className&&(i=i.parentNode);const a=o([parseInt(i.getAttribute("x")),parseInt(i.getAttribute("y"))],parseInt(t.getAttribute("length")),parseInt(t.getAttribute("orientation")));n.placeValidShip(a)?(t.parentNode.removeChild(t),i.appendChild(t),s(a)):(s(e),n.placeValidShip(e))}))}(I),function(n){document.querySelectorAll(".drag").forEach((t=>{t.addEventListener("click",(t=>{console.log("click");const e=t.target,r=parseInt(e.parentNode.getAttribute("x")),i=parseInt(e.parentNode.getAttribute("y"));let c=o([r,i],parseInt(e.getAttribute("length")),parseInt(e.getAttribute("orientation")));console.log(c);let u=c.rotate();n.removeShip([r,i]),n.placeValidShip(u)?(a(c),s(u),e.setAttribute("orientation",`${u.orientation}`),0==u.orientation?(e.style.width=30*u.length+"px",e.style.height="28px"):(e.style.height=30*u.length+"px",e.style.width="28px")):n.placeValidShip(c)}))}))}(I),console.log(C)})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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K0wsRUFBUXRJLE1BQU15SCxPQUFTLFNBR3ZCYSxFQUFRdEksTUFBTXlILE9BQVksR0FBR1MsRUFBUTNMLE9BQWQsS0FDdkIrTCxFQUFRdEksTUFBTXdILE1BQVEsU0FNMUJuQyxFQUFHYyxlQUFlb0MsU0EzTjFCekQsQ0FBT08sR0VRWCtDLFFBQVFDLElBQUl4QyxJIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC8uL3NyYy9zdHlsZS5jc3MiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC8uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanMiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC8uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzIiwid2VicGFjazovL2JhdHRsZXNoaXAvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanMiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanMiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydFN0eWxlRWxlbWVudC5qcyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzLmpzIiwid2VicGFjazovL2JhdHRsZXNoaXAvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZURvbUFQSS5qcyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVUYWdUcmFuc2Zvcm0uanMiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC93ZWJwYWNrL2Jvb3RzdHJhcCIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwL3dlYnBhY2svcnVudGltZS9jb21wYXQgZ2V0IGRlZmF1bHQgZXhwb3J0Iiwid2VicGFjazovL2JhdHRsZXNoaXAvd2VicGFjay9ydW50aW1lL2RlZmluZSBwcm9wZXJ0eSBnZXR0ZXJzIiwid2VicGFjazovL2JhdHRsZXNoaXAvd2VicGFjay9ydW50aW1lL2hhc093blByb3BlcnR5IHNob3J0aGFuZCIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwL3dlYnBhY2svcnVudGltZS9ub25jZSIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwLy4vc3JjL2dhbWUtbG9naWMuanMiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC8uL3NyYy9kb20uanMiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC8uL3NyYy9zdHlsZS5jc3M/NzE2MyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwLy4vc3JjL2luZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fIGZyb20gXCIuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIFwiYm9keSB7XFxuICAgIGZvbnQtZmFtaWx5OiBBcmlhbCwgSGVsdmV0aWNhLCBzYW5zLXNlcmlmO1xcbn1cXG5cXG4jdGl0bGUge1xcbiAgICBtYXJnaW46IDMwcHggNTBweDtcXG59XFxuXFxuI3RpdGxlID4gaDEge1xcbiAgICBmb250LXNpemU6IDMuMnJlbTtcXG4gICAgbWFyZ2luOiAwO1xcbn1cXG5cXG4jdGl0bGUgPiBwIHtcXG4gICAgbWFyZ2luOiAwIDNweCAwO1xcbn1cXG5cXG4uY2VsbC1jb250ZW50IHtcXG4gICAgd2lkdGg6IDI4cHg7XFxuICAgIGhlaWdodDogMjhweDtcXG4gICAgei1pbmRleDogMTtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogI0U1RjNGRjtcXG59XFxuXFxuLmNlbGwtY29udGVudDpob3ZlciB7XFxuICAgIGJhY2tncm91bmQtY29sb3I6IHdoaXRlO1xcbn1cXG5cXG4uZHJhZyB7XFxuICAgIGJvcmRlcjogMnB4IHNvbGlkICMxNDkwRkQ7XFxuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gICAgei1pbmRleDogMjtcXG4gICAgbWFyZ2luOiAtMnB4O1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjQzhFNEZEO1xcbn1cXG5cXG4uZHJhZzpob3ZlciB7XFxuICAgIGN1cnNvcjogbW92ZTtcXG59XFxuXFxudGFibGUge1xcbiAgICBtYXJnaW46IDUwcHggYXV0byAzMHB4IGF1dG87XFxuICAgIGJvcmRlci1jb2xsYXBzZTogY29sbGFwc2U7XFxufVxcblxcbi5hY3RpdmUsIC5hZGphY2VudCB7XFxuICAgIGJhY2tncm91bmQtY29sb3I6IHdoaXRlO1xcbn1cXG5cXG50ZCB7XFxuICAgIGJvcmRlcjogMXB4IHNvbGlkICNDOEU0RkQ7XFxufVxcblxcbiNzZWxlY3Rpb24ge1xcbiAgICBkaXNwbGF5OiBmbGV4O1xcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcXG4gICAgZ2FwOiAzMHB4O1xcbiAgICB3aWR0aDogMzIwcHg7XFxuICAgIGhlaWdodDogNDBweDtcXG4gICAgbWFyZ2luOiBhdXRvO1xcbn1cXG5cXG5idXR0b24ge1xcbiAgICBib3JkZXI6IG5vbmU7XFxuICAgIGJvcmRlci1yYWRpdXM6IDA7XFxuICAgIHBhZGRpbmc6IDEwcHg7XFxuXFxufVwiLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIndlYnBhY2s6Ly8uL3NyYy9zdHlsZS5jc3NcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIkFBQUE7SUFDSSx5Q0FBeUM7QUFDN0M7O0FBRUE7SUFDSSxpQkFBaUI7QUFDckI7O0FBRUE7SUFDSSxpQkFBaUI7SUFDakIsU0FBUztBQUNiOztBQUVBO0lBQ0ksZUFBZTtBQUNuQjs7QUFFQTtJQUNJLFdBQVc7SUFDWCxZQUFZO0lBQ1osVUFBVTtJQUNWLHlCQUF5QjtBQUM3Qjs7QUFFQTtJQUNJLHVCQUF1QjtBQUMzQjs7QUFFQTtJQUNJLHlCQUF5QjtJQUN6QixrQkFBa0I7SUFDbEIsVUFBVTtJQUNWLFlBQVk7SUFDWix5QkFBeUI7QUFDN0I7O0FBRUE7SUFDSSxZQUFZO0FBQ2hCOztBQUVBO0lBQ0ksMkJBQTJCO0lBQzNCLHlCQUF5QjtBQUM3Qjs7QUFFQTtJQUNJLHVCQUF1QjtBQUMzQjs7QUFFQTtJQUNJLHlCQUF5QjtBQUM3Qjs7QUFFQTtJQUNJLGFBQWE7SUFDYix1QkFBdUI7SUFDdkIsU0FBUztJQUNULFlBQVk7SUFDWixZQUFZO0lBQ1osWUFBWTtBQUNoQjs7QUFFQTtJQUNJLFlBQVk7SUFDWixnQkFBZ0I7SUFDaEIsYUFBYTs7QUFFakJcIixcInNvdXJjZXNDb250ZW50XCI6W1wiYm9keSB7XFxuICAgIGZvbnQtZmFtaWx5OiBBcmlhbCwgSGVsdmV0aWNhLCBzYW5zLXNlcmlmO1xcbn1cXG5cXG4jdGl0bGUge1xcbiAgICBtYXJnaW46IDMwcHggNTBweDtcXG59XFxuXFxuI3RpdGxlID4gaDEge1xcbiAgICBmb250LXNpemU6IDMuMnJlbTtcXG4gICAgbWFyZ2luOiAwO1xcbn1cXG5cXG4jdGl0bGUgPiBwIHtcXG4gICAgbWFyZ2luOiAwIDNweCAwO1xcbn1cXG5cXG4uY2VsbC1jb250ZW50IHtcXG4gICAgd2lkdGg6IDI4cHg7XFxuICAgIGhlaWdodDogMjhweDtcXG4gICAgei1pbmRleDogMTtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogI0U1RjNGRjtcXG59XFxuXFxuLmNlbGwtY29udGVudDpob3ZlciB7XFxuICAgIGJhY2tncm91bmQtY29sb3I6IHdoaXRlO1xcbn1cXG5cXG4uZHJhZyB7XFxuICAgIGJvcmRlcjogMnB4IHNvbGlkICMxNDkwRkQ7XFxuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gICAgei1pbmRleDogMjtcXG4gICAgbWFyZ2luOiAtMnB4O1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjQzhFNEZEO1xcbn1cXG5cXG4uZHJhZzpob3ZlciB7XFxuICAgIGN1cnNvcjogbW92ZTtcXG59XFxuXFxudGFibGUge1xcbiAgICBtYXJnaW46IDUwcHggYXV0byAzMHB4IGF1dG87XFxuICAgIGJvcmRlci1jb2xsYXBzZTogY29sbGFwc2U7XFxufVxcblxcbi5hY3RpdmUsIC5hZGphY2VudCB7XFxuICAgIGJhY2tncm91bmQtY29sb3I6IHdoaXRlO1xcbn1cXG5cXG50ZCB7XFxuICAgIGJvcmRlcjogMXB4IHNvbGlkICNDOEU0RkQ7XFxufVxcblxcbiNzZWxlY3Rpb24ge1xcbiAgICBkaXNwbGF5OiBmbGV4O1xcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcXG4gICAgZ2FwOiAzMHB4O1xcbiAgICB3aWR0aDogMzIwcHg7XFxuICAgIGhlaWdodDogNDBweDtcXG4gICAgbWFyZ2luOiBhdXRvO1xcbn1cXG5cXG5idXR0b24ge1xcbiAgICBib3JkZXI6IG5vbmU7XFxuICAgIGJvcmRlci1yYWRpdXM6IDA7XFxuICAgIHBhZGRpbmc6IDEwcHg7XFxuXFxufVwiXSxcInNvdXJjZVJvb3RcIjpcIlwifV0pO1xuLy8gRXhwb3J0c1xuZXhwb3J0IGRlZmF1bHQgX19fQ1NTX0xPQURFUl9FWFBPUlRfX187XG4iLCJcInVzZSBzdHJpY3RcIjtcblxuLypcbiAgTUlUIExpY2Vuc2UgaHR0cDovL3d3dy5vcGVuc291cmNlLm9yZy9saWNlbnNlcy9taXQtbGljZW5zZS5waHBcbiAgQXV0aG9yIFRvYmlhcyBLb3BwZXJzIEBzb2tyYVxuKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcpIHtcbiAgdmFyIGxpc3QgPSBbXTsgLy8gcmV0dXJuIHRoZSBsaXN0IG9mIG1vZHVsZXMgYXMgY3NzIHN0cmluZ1xuXG4gIGxpc3QudG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICByZXR1cm4gdGhpcy5tYXAoZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgIHZhciBjb250ZW50ID0gXCJcIjtcbiAgICAgIHZhciBuZWVkTGF5ZXIgPSB0eXBlb2YgaXRlbVs1XSAhPT0gXCJ1bmRlZmluZWRcIjtcblxuICAgICAgaWYgKGl0ZW1bNF0pIHtcbiAgICAgICAgY29udGVudCArPSBcIkBzdXBwb3J0cyAoXCIuY29uY2F0KGl0ZW1bNF0sIFwiKSB7XCIpO1xuICAgICAgfVxuXG4gICAgICBpZiAoaXRlbVsyXSkge1xuICAgICAgICBjb250ZW50ICs9IFwiQG1lZGlhIFwiLmNvbmNhdChpdGVtWzJdLCBcIiB7XCIpO1xuICAgICAgfVxuXG4gICAgICBpZiAobmVlZExheWVyKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJAbGF5ZXJcIi5jb25jYXQoaXRlbVs1XS5sZW5ndGggPiAwID8gXCIgXCIuY29uY2F0KGl0ZW1bNV0pIDogXCJcIiwgXCIge1wiKTtcbiAgICAgIH1cblxuICAgICAgY29udGVudCArPSBjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKGl0ZW0pO1xuXG4gICAgICBpZiAobmVlZExheWVyKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJ9XCI7XG4gICAgICB9XG5cbiAgICAgIGlmIChpdGVtWzJdKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJ9XCI7XG4gICAgICB9XG5cbiAgICAgIGlmIChpdGVtWzRdKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJ9XCI7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBjb250ZW50O1xuICAgIH0pLmpvaW4oXCJcIik7XG4gIH07IC8vIGltcG9ydCBhIGxpc3Qgb2YgbW9kdWxlcyBpbnRvIHRoZSBsaXN0XG5cblxuICBsaXN0LmkgPSBmdW5jdGlvbiBpKG1vZHVsZXMsIG1lZGlhLCBkZWR1cGUsIHN1cHBvcnRzLCBsYXllcikge1xuICAgIGlmICh0eXBlb2YgbW9kdWxlcyA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgbW9kdWxlcyA9IFtbbnVsbCwgbW9kdWxlcywgdW5kZWZpbmVkXV07XG4gICAgfVxuXG4gICAgdmFyIGFscmVhZHlJbXBvcnRlZE1vZHVsZXMgPSB7fTtcblxuICAgIGlmIChkZWR1cGUpIHtcbiAgICAgIGZvciAodmFyIGsgPSAwOyBrIDwgdGhpcy5sZW5ndGg7IGsrKykge1xuICAgICAgICB2YXIgaWQgPSB0aGlzW2tdWzBdO1xuXG4gICAgICAgIGlmIChpZCAhPSBudWxsKSB7XG4gICAgICAgICAgYWxyZWFkeUltcG9ydGVkTW9kdWxlc1tpZF0gPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgZm9yICh2YXIgX2sgPSAwOyBfayA8IG1vZHVsZXMubGVuZ3RoOyBfaysrKSB7XG4gICAgICB2YXIgaXRlbSA9IFtdLmNvbmNhdChtb2R1bGVzW19rXSk7XG5cbiAgICAgIGlmIChkZWR1cGUgJiYgYWxyZWFkeUltcG9ydGVkTW9kdWxlc1tpdGVtWzBdXSkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgaWYgKHR5cGVvZiBsYXllciAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICBpZiAodHlwZW9mIGl0ZW1bNV0gPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgICBpdGVtWzVdID0gbGF5ZXI7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaXRlbVsxXSA9IFwiQGxheWVyXCIuY29uY2F0KGl0ZW1bNV0ubGVuZ3RoID4gMCA/IFwiIFwiLmNvbmNhdChpdGVtWzVdKSA6IFwiXCIsIFwiIHtcIikuY29uY2F0KGl0ZW1bMV0sIFwifVwiKTtcbiAgICAgICAgICBpdGVtWzVdID0gbGF5ZXI7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKG1lZGlhKSB7XG4gICAgICAgIGlmICghaXRlbVsyXSkge1xuICAgICAgICAgIGl0ZW1bMl0gPSBtZWRpYTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpdGVtWzFdID0gXCJAbWVkaWEgXCIuY29uY2F0KGl0ZW1bMl0sIFwiIHtcIikuY29uY2F0KGl0ZW1bMV0sIFwifVwiKTtcbiAgICAgICAgICBpdGVtWzJdID0gbWVkaWE7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKHN1cHBvcnRzKSB7XG4gICAgICAgIGlmICghaXRlbVs0XSkge1xuICAgICAgICAgIGl0ZW1bNF0gPSBcIlwiLmNvbmNhdChzdXBwb3J0cyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaXRlbVsxXSA9IFwiQHN1cHBvcnRzIChcIi5jb25jYXQoaXRlbVs0XSwgXCIpIHtcIikuY29uY2F0KGl0ZW1bMV0sIFwifVwiKTtcbiAgICAgICAgICBpdGVtWzRdID0gc3VwcG9ydHM7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgbGlzdC5wdXNoKGl0ZW0pO1xuICAgIH1cbiAgfTtcblxuICByZXR1cm4gbGlzdDtcbn07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0ZW0pIHtcbiAgdmFyIGNvbnRlbnQgPSBpdGVtWzFdO1xuICB2YXIgY3NzTWFwcGluZyA9IGl0ZW1bM107XG5cbiAgaWYgKCFjc3NNYXBwaW5nKSB7XG4gICAgcmV0dXJuIGNvbnRlbnQ7XG4gIH1cblxuICBpZiAodHlwZW9mIGJ0b2EgPT09IFwiZnVuY3Rpb25cIikge1xuICAgIHZhciBiYXNlNjQgPSBidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShjc3NNYXBwaW5nKSkpKTtcbiAgICB2YXIgZGF0YSA9IFwic291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsXCIuY29uY2F0KGJhc2U2NCk7XG4gICAgdmFyIHNvdXJjZU1hcHBpbmcgPSBcIi8qIyBcIi5jb25jYXQoZGF0YSwgXCIgKi9cIik7XG4gICAgdmFyIHNvdXJjZVVSTHMgPSBjc3NNYXBwaW5nLnNvdXJjZXMubWFwKGZ1bmN0aW9uIChzb3VyY2UpIHtcbiAgICAgIHJldHVybiBcIi8qIyBzb3VyY2VVUkw9XCIuY29uY2F0KGNzc01hcHBpbmcuc291cmNlUm9vdCB8fCBcIlwiKS5jb25jYXQoc291cmNlLCBcIiAqL1wiKTtcbiAgICB9KTtcbiAgICByZXR1cm4gW2NvbnRlbnRdLmNvbmNhdChzb3VyY2VVUkxzKS5jb25jYXQoW3NvdXJjZU1hcHBpbmddKS5qb2luKFwiXFxuXCIpO1xuICB9XG5cbiAgcmV0dXJuIFtjb250ZW50XS5qb2luKFwiXFxuXCIpO1xufTsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIHN0eWxlc0luRE9NID0gW107XG5cbmZ1bmN0aW9uIGdldEluZGV4QnlJZGVudGlmaWVyKGlkZW50aWZpZXIpIHtcbiAgdmFyIHJlc3VsdCA9IC0xO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgc3R5bGVzSW5ET00ubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoc3R5bGVzSW5ET01baV0uaWRlbnRpZmllciA9PT0gaWRlbnRpZmllcikge1xuICAgICAgcmVzdWx0ID0gaTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmZ1bmN0aW9uIG1vZHVsZXNUb0RvbShsaXN0LCBvcHRpb25zKSB7XG4gIHZhciBpZENvdW50TWFwID0ge307XG4gIHZhciBpZGVudGlmaWVycyA9IFtdO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7IGkrKykge1xuICAgIHZhciBpdGVtID0gbGlzdFtpXTtcbiAgICB2YXIgaWQgPSBvcHRpb25zLmJhc2UgPyBpdGVtWzBdICsgb3B0aW9ucy5iYXNlIDogaXRlbVswXTtcbiAgICB2YXIgY291bnQgPSBpZENvdW50TWFwW2lkXSB8fCAwO1xuICAgIHZhciBpZGVudGlmaWVyID0gXCJcIi5jb25jYXQoaWQsIFwiIFwiKS5jb25jYXQoY291bnQpO1xuICAgIGlkQ291bnRNYXBbaWRdID0gY291bnQgKyAxO1xuICAgIHZhciBpbmRleEJ5SWRlbnRpZmllciA9IGdldEluZGV4QnlJZGVudGlmaWVyKGlkZW50aWZpZXIpO1xuICAgIHZhciBvYmogPSB7XG4gICAgICBjc3M6IGl0ZW1bMV0sXG4gICAgICBtZWRpYTogaXRlbVsyXSxcbiAgICAgIHNvdXJjZU1hcDogaXRlbVszXSxcbiAgICAgIHN1cHBvcnRzOiBpdGVtWzRdLFxuICAgICAgbGF5ZXI6IGl0ZW1bNV1cbiAgICB9O1xuXG4gICAgaWYgKGluZGV4QnlJZGVudGlmaWVyICE9PSAtMSkge1xuICAgICAgc3R5bGVzSW5ET01baW5kZXhCeUlkZW50aWZpZXJdLnJlZmVyZW5jZXMrKztcbiAgICAgIHN0eWxlc0luRE9NW2luZGV4QnlJZGVudGlmaWVyXS51cGRhdGVyKG9iaik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciB1cGRhdGVyID0gYWRkRWxlbWVudFN0eWxlKG9iaiwgb3B0aW9ucyk7XG4gICAgICBvcHRpb25zLmJ5SW5kZXggPSBpO1xuICAgICAgc3R5bGVzSW5ET00uc3BsaWNlKGksIDAsIHtcbiAgICAgICAgaWRlbnRpZmllcjogaWRlbnRpZmllcixcbiAgICAgICAgdXBkYXRlcjogdXBkYXRlcixcbiAgICAgICAgcmVmZXJlbmNlczogMVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgaWRlbnRpZmllcnMucHVzaChpZGVudGlmaWVyKTtcbiAgfVxuXG4gIHJldHVybiBpZGVudGlmaWVycztcbn1cblxuZnVuY3Rpb24gYWRkRWxlbWVudFN0eWxlKG9iaiwgb3B0aW9ucykge1xuICB2YXIgYXBpID0gb3B0aW9ucy5kb21BUEkob3B0aW9ucyk7XG4gIGFwaS51cGRhdGUob2JqKTtcblxuICB2YXIgdXBkYXRlciA9IGZ1bmN0aW9uIHVwZGF0ZXIobmV3T2JqKSB7XG4gICAgaWYgKG5ld09iaikge1xuICAgICAgaWYgKG5ld09iai5jc3MgPT09IG9iai5jc3MgJiYgbmV3T2JqLm1lZGlhID09PSBvYmoubWVkaWEgJiYgbmV3T2JqLnNvdXJjZU1hcCA9PT0gb2JqLnNvdXJjZU1hcCAmJiBuZXdPYmouc3VwcG9ydHMgPT09IG9iai5zdXBwb3J0cyAmJiBuZXdPYmoubGF5ZXIgPT09IG9iai5sYXllcikge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGFwaS51cGRhdGUob2JqID0gbmV3T2JqKTtcbiAgICB9IGVsc2Uge1xuICAgICAgYXBpLnJlbW92ZSgpO1xuICAgIH1cbiAgfTtcblxuICByZXR1cm4gdXBkYXRlcjtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAobGlzdCwgb3B0aW9ucykge1xuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgbGlzdCA9IGxpc3QgfHwgW107XG4gIHZhciBsYXN0SWRlbnRpZmllcnMgPSBtb2R1bGVzVG9Eb20obGlzdCwgb3B0aW9ucyk7XG4gIHJldHVybiBmdW5jdGlvbiB1cGRhdGUobmV3TGlzdCkge1xuICAgIG5ld0xpc3QgPSBuZXdMaXN0IHx8IFtdO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsYXN0SWRlbnRpZmllcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBpZGVudGlmaWVyID0gbGFzdElkZW50aWZpZXJzW2ldO1xuICAgICAgdmFyIGluZGV4ID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcik7XG4gICAgICBzdHlsZXNJbkRPTVtpbmRleF0ucmVmZXJlbmNlcy0tO1xuICAgIH1cblxuICAgIHZhciBuZXdMYXN0SWRlbnRpZmllcnMgPSBtb2R1bGVzVG9Eb20obmV3TGlzdCwgb3B0aW9ucyk7XG5cbiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgbGFzdElkZW50aWZpZXJzLmxlbmd0aDsgX2krKykge1xuICAgICAgdmFyIF9pZGVudGlmaWVyID0gbGFzdElkZW50aWZpZXJzW19pXTtcblxuICAgICAgdmFyIF9pbmRleCA9IGdldEluZGV4QnlJZGVudGlmaWVyKF9pZGVudGlmaWVyKTtcblxuICAgICAgaWYgKHN0eWxlc0luRE9NW19pbmRleF0ucmVmZXJlbmNlcyA9PT0gMCkge1xuICAgICAgICBzdHlsZXNJbkRPTVtfaW5kZXhdLnVwZGF0ZXIoKTtcblxuICAgICAgICBzdHlsZXNJbkRPTS5zcGxpY2UoX2luZGV4LCAxKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBsYXN0SWRlbnRpZmllcnMgPSBuZXdMYXN0SWRlbnRpZmllcnM7XG4gIH07XG59OyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgbWVtbyA9IHt9O1xuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5cbmZ1bmN0aW9uIGdldFRhcmdldCh0YXJnZXQpIHtcbiAgaWYgKHR5cGVvZiBtZW1vW3RhcmdldF0gPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICB2YXIgc3R5bGVUYXJnZXQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHRhcmdldCk7IC8vIFNwZWNpYWwgY2FzZSB0byByZXR1cm4gaGVhZCBvZiBpZnJhbWUgaW5zdGVhZCBvZiBpZnJhbWUgaXRzZWxmXG5cbiAgICBpZiAod2luZG93LkhUTUxJRnJhbWVFbGVtZW50ICYmIHN0eWxlVGFyZ2V0IGluc3RhbmNlb2Ygd2luZG93LkhUTUxJRnJhbWVFbGVtZW50KSB7XG4gICAgICB0cnkge1xuICAgICAgICAvLyBUaGlzIHdpbGwgdGhyb3cgYW4gZXhjZXB0aW9uIGlmIGFjY2VzcyB0byBpZnJhbWUgaXMgYmxvY2tlZFxuICAgICAgICAvLyBkdWUgdG8gY3Jvc3Mtb3JpZ2luIHJlc3RyaWN0aW9uc1xuICAgICAgICBzdHlsZVRhcmdldCA9IHN0eWxlVGFyZ2V0LmNvbnRlbnREb2N1bWVudC5oZWFkO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAvLyBpc3RhbmJ1bCBpZ25vcmUgbmV4dFxuICAgICAgICBzdHlsZVRhcmdldCA9IG51bGw7XG4gICAgICB9XG4gICAgfVxuXG4gICAgbWVtb1t0YXJnZXRdID0gc3R5bGVUYXJnZXQ7XG4gIH1cblxuICByZXR1cm4gbWVtb1t0YXJnZXRdO1xufVxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5cblxuZnVuY3Rpb24gaW5zZXJ0QnlTZWxlY3RvcihpbnNlcnQsIHN0eWxlKSB7XG4gIHZhciB0YXJnZXQgPSBnZXRUYXJnZXQoaW5zZXJ0KTtcblxuICBpZiAoIXRhcmdldCkge1xuICAgIHRocm93IG5ldyBFcnJvcihcIkNvdWxkbid0IGZpbmQgYSBzdHlsZSB0YXJnZXQuIFRoaXMgcHJvYmFibHkgbWVhbnMgdGhhdCB0aGUgdmFsdWUgZm9yIHRoZSAnaW5zZXJ0JyBwYXJhbWV0ZXIgaXMgaW52YWxpZC5cIik7XG4gIH1cblxuICB0YXJnZXQuYXBwZW5kQ2hpbGQoc3R5bGUpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGluc2VydEJ5U2VsZWN0b3I7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gaW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMpIHtcbiAgdmFyIGVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3R5bGVcIik7XG4gIG9wdGlvbnMuc2V0QXR0cmlidXRlcyhlbGVtZW50LCBvcHRpb25zLmF0dHJpYnV0ZXMpO1xuICBvcHRpb25zLmluc2VydChlbGVtZW50LCBvcHRpb25zLm9wdGlvbnMpO1xuICByZXR1cm4gZWxlbWVudDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpbnNlcnRTdHlsZUVsZW1lbnQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzKHN0eWxlRWxlbWVudCkge1xuICB2YXIgbm9uY2UgPSB0eXBlb2YgX193ZWJwYWNrX25vbmNlX18gIT09IFwidW5kZWZpbmVkXCIgPyBfX3dlYnBhY2tfbm9uY2VfXyA6IG51bGw7XG5cbiAgaWYgKG5vbmNlKSB7XG4gICAgc3R5bGVFbGVtZW50LnNldEF0dHJpYnV0ZShcIm5vbmNlXCIsIG5vbmNlKTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHNldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlczsiLCJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBhcHBseShzdHlsZUVsZW1lbnQsIG9wdGlvbnMsIG9iaikge1xuICB2YXIgY3NzID0gXCJcIjtcblxuICBpZiAob2JqLnN1cHBvcnRzKSB7XG4gICAgY3NzICs9IFwiQHN1cHBvcnRzIChcIi5jb25jYXQob2JqLnN1cHBvcnRzLCBcIikge1wiKTtcbiAgfVxuXG4gIGlmIChvYmoubWVkaWEpIHtcbiAgICBjc3MgKz0gXCJAbWVkaWEgXCIuY29uY2F0KG9iai5tZWRpYSwgXCIge1wiKTtcbiAgfVxuXG4gIHZhciBuZWVkTGF5ZXIgPSB0eXBlb2Ygb2JqLmxheWVyICE9PSBcInVuZGVmaW5lZFwiO1xuXG4gIGlmIChuZWVkTGF5ZXIpIHtcbiAgICBjc3MgKz0gXCJAbGF5ZXJcIi5jb25jYXQob2JqLmxheWVyLmxlbmd0aCA+IDAgPyBcIiBcIi5jb25jYXQob2JqLmxheWVyKSA6IFwiXCIsIFwiIHtcIik7XG4gIH1cblxuICBjc3MgKz0gb2JqLmNzcztcblxuICBpZiAobmVlZExheWVyKSB7XG4gICAgY3NzICs9IFwifVwiO1xuICB9XG5cbiAgaWYgKG9iai5tZWRpYSkge1xuICAgIGNzcyArPSBcIn1cIjtcbiAgfVxuXG4gIGlmIChvYmouc3VwcG9ydHMpIHtcbiAgICBjc3MgKz0gXCJ9XCI7XG4gIH1cblxuICB2YXIgc291cmNlTWFwID0gb2JqLnNvdXJjZU1hcDtcblxuICBpZiAoc291cmNlTWFwICYmIHR5cGVvZiBidG9hICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgY3NzICs9IFwiXFxuLyojIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxcIi5jb25jYXQoYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoc291cmNlTWFwKSkpKSwgXCIgKi9cIik7XG4gIH0gLy8gRm9yIG9sZCBJRVxuXG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAgKi9cblxuXG4gIG9wdGlvbnMuc3R5bGVUYWdUcmFuc2Zvcm0oY3NzLCBzdHlsZUVsZW1lbnQsIG9wdGlvbnMub3B0aW9ucyk7XG59XG5cbmZ1bmN0aW9uIHJlbW92ZVN0eWxlRWxlbWVudChzdHlsZUVsZW1lbnQpIHtcbiAgLy8gaXN0YW5idWwgaWdub3JlIGlmXG4gIGlmIChzdHlsZUVsZW1lbnQucGFyZW50Tm9kZSA9PT0gbnVsbCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHN0eWxlRWxlbWVudC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHN0eWxlRWxlbWVudCk7XG59XG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cblxuXG5mdW5jdGlvbiBkb21BUEkob3B0aW9ucykge1xuICB2YXIgc3R5bGVFbGVtZW50ID0gb3B0aW9ucy5pbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucyk7XG4gIHJldHVybiB7XG4gICAgdXBkYXRlOiBmdW5jdGlvbiB1cGRhdGUob2JqKSB7XG4gICAgICBhcHBseShzdHlsZUVsZW1lbnQsIG9wdGlvbnMsIG9iaik7XG4gICAgfSxcbiAgICByZW1vdmU6IGZ1bmN0aW9uIHJlbW92ZSgpIHtcbiAgICAgIHJlbW92ZVN0eWxlRWxlbWVudChzdHlsZUVsZW1lbnQpO1xuICAgIH1cbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBkb21BUEk7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gc3R5bGVUYWdUcmFuc2Zvcm0oY3NzLCBzdHlsZUVsZW1lbnQpIHtcbiAgaWYgKHN0eWxlRWxlbWVudC5zdHlsZVNoZWV0KSB7XG4gICAgc3R5bGVFbGVtZW50LnN0eWxlU2hlZXQuY3NzVGV4dCA9IGNzcztcbiAgfSBlbHNlIHtcbiAgICB3aGlsZSAoc3R5bGVFbGVtZW50LmZpcnN0Q2hpbGQpIHtcbiAgICAgIHN0eWxlRWxlbWVudC5yZW1vdmVDaGlsZChzdHlsZUVsZW1lbnQuZmlyc3RDaGlsZCk7XG4gICAgfVxuXG4gICAgc3R5bGVFbGVtZW50LmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGNzcykpO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc3R5bGVUYWdUcmFuc2Zvcm07IiwiLy8gVGhlIG1vZHVsZSBjYWNoZVxudmFyIF9fd2VicGFja19tb2R1bGVfY2FjaGVfXyA9IHt9O1xuXG4vLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcblx0dmFyIGNhY2hlZE1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF07XG5cdGlmIChjYWNoZWRNb2R1bGUgIT09IHVuZGVmaW5lZCkge1xuXHRcdHJldHVybiBjYWNoZWRNb2R1bGUuZXhwb3J0cztcblx0fVxuXHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuXHR2YXIgbW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXSA9IHtcblx0XHRpZDogbW9kdWxlSWQsXG5cdFx0Ly8gbm8gbW9kdWxlLmxvYWRlZCBuZWVkZWRcblx0XHRleHBvcnRzOiB7fVxuXHR9O1xuXG5cdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuXHRfX3dlYnBhY2tfbW9kdWxlc19fW21vZHVsZUlkXShtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuXHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuXHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59XG5cbiIsIi8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSAobW9kdWxlKSA9PiB7XG5cdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuXHRcdCgpID0+IChtb2R1bGVbJ2RlZmF1bHQnXSkgOlxuXHRcdCgpID0+IChtb2R1bGUpO1xuXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCB7IGE6IGdldHRlciB9KTtcblx0cmV0dXJuIGdldHRlcjtcbn07IiwiLy8gZGVmaW5lIGdldHRlciBmdW5jdGlvbnMgZm9yIGhhcm1vbnkgZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXy5kID0gKGV4cG9ydHMsIGRlZmluaXRpb24pID0+IHtcblx0Zm9yKHZhciBrZXkgaW4gZGVmaW5pdGlvbikge1xuXHRcdGlmKF9fd2VicGFja19yZXF1aXJlX18ubyhkZWZpbml0aW9uLCBrZXkpICYmICFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywga2V5KSkge1xuXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIGtleSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGRlZmluaXRpb25ba2V5XSB9KTtcblx0XHR9XG5cdH1cbn07IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5vID0gKG9iaiwgcHJvcCkgPT4gKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIHByb3ApKSIsIl9fd2VicGFja19yZXF1aXJlX18ubmMgPSB1bmRlZmluZWQ7IiwiXG4vL2hlbHBlciBmdW5jdGlvbnNcbmZ1bmN0aW9uIGdldFJhbmRvbUludChtYXgpIHtcbiAgICByZXR1cm4gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogbWF4KTtcbn1cblxuZnVuY3Rpb24gZ2V0Q29vcmRpbmF0ZXMoeG1heCx5bWF4KSB7XG4gICAgY29uc3QgeCA9IGdldFJhbmRvbUludCh4bWF4KTtcbiAgICBjb25zdCB5ID0gZ2V0UmFuZG9tSW50KHltYXgpXG4gICAgXG4gICAgcmV0dXJuIFt4LHldO1xufVxuXG4vL3NoaXAgb2JqZWN0IGluaXRpYWxpemVkIHdpdGggMiBpbnB1dCBhcnJheXMgY29udGFpbmluZyBjb250YWluaW5nIGNvb3JkaW5hdGVzLiBcbmZ1bmN0aW9uIHNoaXAoYzEsIGMyKSB7XG5cbiAgICBsZXQgaGl0cyA9IFtdXG4gICAgLy9jYWxjdWxhdGVzIHRoZSBsZW5ndGggYnkgc3VidHJhY3RpbmcgdGhlIHggYW5kIHkgY29vcmRpbmF0ZXMgYW5kIGFkZGluZyAxXG4gICAgY29uc3QgbGVuZ3RoID0gTWF0aC5hYnMoYzFbMF0gLSBjMlswXSArIGMxWzFdIC0gYzJbMV0pICsgMTtcblxuICAgIC8vZ2l2ZW4gdHdvIGNvb3JkaW5hdGVzLCByZXR1cm5zIGFsbCBjb29yZGluYXRlcyBpbiBiZXR3ZWVuXG4gICAgZnVuY3Rpb24gZ2V0SGl0UG9pbnRzKGMxLCBjMikge1xuICAgIFxuICAgICAgICBjb25zdCBIUCA9IFtdXG5cbiAgICAgICAgLy9pZiBsZW5ndGggMSB0aGVuIGp1c3QgcmV0dXJuIHRoZSBvbmx5IGNvb3JkaW5hdGVcbiAgICAgICAgaWYgKGxlbmd0aCA9PSAxKSB7XG4gICAgICAgICAgICByZXR1cm4gW2MxXVxuICAgICAgICB9XG5cbiAgICAgICAgLy9pZiB4IHZhbHVlcyBhcmUgdGhlIHNhbWUgdGhlbiByZXR1cm4gY29vcmRpbmF0ZXMgd2l0aCBzYW1lIHggdmFsdWUgYW5kIGFsbCB5IHZhbHVlcyBpbiBiZXR3ZWVuXG4gICAgICAgIGlmIChjMVswXSA9PSBjMlswXSkge1xuXG4gICAgICAgICAgICBpZiAoYzFbMV0gPiBjMlsxXSkge1xuICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSBjMlsxXTsgaSA8PSBjMVsxXTsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIEhQLnB1c2goW2MxWzBdLCBpXSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gYzFbMV07IGkgPD0gYzJbMV07IGkrKykge1xuICAgICAgICAgICAgICAgICAgICBIUC5wdXNoKFtjMVswXSwgaV0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vaWYgeSB2YWx1ZXMgYXJlIHRoZSBzYW1lIHRoZW4gcmV0dXJuIGNvb3JkaW5hdGVzIHdpdGggc2FtZSB5IHZhbHVlIGFuZCBhbGwgeCB2YWx1ZXMgaW4gYmV0d2VlblxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGlmIChjMVswXSA+IGMyWzBdKSB7XG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IGMyWzBdOyBpIDw9IGMxWzBdOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgSFAucHVzaChbaSwgYzFbMV1dKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSBjMVswXTsgaSA8PSBjMlswXTsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIEhQLnB1c2goW2ksIGMxWzFdXSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgXG4gICAgICAgIHJldHVybiBIUDtcblxuICAgIH1cblxuICAgIGNvbnN0IGhpdFBvaW50cyA9IGdldEhpdFBvaW50cyhjMSxjMik7XG5cbiAgICAvL3JldHVybnMgdGhlIG9yaWVudGF0aW9uIG9mIHRoZSBzaGlwLiBSZXR1cm5zIDAgZm9yIGhvcml6b250YWwsIDEgZm9yIHZlcnRpY2FsLlxuICAgIGZ1bmN0aW9uIGdldE9yaWVudGF0aW9uKCkge1xuICAgICAgICBpZiAobGVuZ3RoID09IDEpIHtcbiAgICAgICAgICAgIHJldHVybiAxO1xuICAgICAgICB9XG4gICAgICAgIGlmIChjMVswXSA9PSBjMlswXSkge1xuICAgICAgICAgICAgcmV0dXJuIDE7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGNvbnN0IG9yaWVudGF0aW9uID0gZ2V0T3JpZW50YXRpb24oKTtcblxuICAgIC8vZnVuY3Rpb24gcmV0dXJucyB0aGUgY29vcmRpbmF0ZXMgd2hpY2ggYXJlIGFkamFjZW50IHRvIHNoaXBcbiAgICBmdW5jdGlvbiBnZXRBZGphY2VudCgpIHtcbiAgICAgICAgXG4gICAgICAgIGhpdFBvaW50cy5zb3J0KClcbiAgICAgICAgY29uc3Qgc3RhcnQgPSBoaXRQb2ludHNbMF07XG4gICAgICAgIGNvbnN0IGVuZCA9IGhpdFBvaW50c1tsZW5ndGggLSAxXTtcbiAgICAgICAgbGV0IGFkamFjZW5jaWVzID0gW11cbiAgICAgICAgY29uc3Qgb3JpID0gZ2V0T3JpZW50YXRpb24oKTtcbiAgICAgICAgXG4gICAgICAgIC8vaWYgaG9yaXpvbnRhbCBzaGlwXG4gICAgICAgIGlmIChvcmkgPT0gMCkge1xuICAgICAgICAgICAgXG4gICAgICAgICAgICAvL2FkZCBjb29yZGluYXRlcyB0byB0aGUgbGVmdCBvZiBzdGFydFxuICAgICAgICAgICAgYWRqYWNlbmNpZXMucHVzaChbc3RhcnRbMF0tMSxzdGFydFsxXV0pO1xuICAgICAgICAgICAgYWRqYWNlbmNpZXMucHVzaChbc3RhcnRbMF0tMSxzdGFydFsxXS0xXSk7XG4gICAgICAgICAgICBhZGphY2VuY2llcy5wdXNoKFtzdGFydFswXS0xLHN0YXJ0WzFdKzFdKTtcblxuICAgICAgICAgICAgLy9hZGQgY29vcmRpbmF0ZXMgdG8gcmlnaHQgb2YgZW5kXG4gICAgICAgICAgICBhZGphY2VuY2llcy5wdXNoKFtlbmRbMF0rMSwgZW5kWzFdXSlcbiAgICAgICAgICAgIGFkamFjZW5jaWVzLnB1c2goW2VuZFswXSsxLCBlbmRbMV0tMV0pXG4gICAgICAgICAgICBhZGphY2VuY2llcy5wdXNoKFtlbmRbMF0rMSwgZW5kWzFdKzFdKVxuXG4gICAgICAgICAgICAvL2FkZCBjb29yZGluYXRlcyBhYm92ZSBhbmQgYmVsb3cgZWFjaCBjb29yZGluYXRlIGluIGhpdFBvaW50c1xuICAgICAgICAgICAgaGl0UG9pbnRzLmZvckVhY2goY29vcmRpbmF0ZSA9PiB7XG5cbiAgICAgICAgICAgICAgICBhZGphY2VuY2llcy5wdXNoKFtjb29yZGluYXRlWzBdLCBjb29yZGluYXRlWzFdKzFdKTtcbiAgICAgICAgICAgICAgICBhZGphY2VuY2llcy5wdXNoKFtjb29yZGluYXRlWzBdLCBjb29yZGluYXRlWzFdLTFdKTtcblxuICAgICAgICAgICAgfSlcblxuICAgICAgICAgICAgcmV0dXJuIGFkamFjZW5jaWVzO1xuXG4gICAgICAgIH1cblxuICAgICAgICAvL2lmIHZlcnRpY2FsIHNoaXBcbiAgICAgICAgZWxzZSB7XG5cbiAgICAgICAgICAgIC8vYWRkIGNvb3JkaW5hdGVzIGFib3ZlIHN0YXJ0XG4gICAgICAgICAgICBhZGphY2VuY2llcy5wdXNoKFtzdGFydFswXSwgc3RhcnRbMV0tMV0pO1xuICAgICAgICAgICAgYWRqYWNlbmNpZXMucHVzaChbc3RhcnRbMF0tMSwgc3RhcnRbMV0tMV0pO1xuICAgICAgICAgICAgYWRqYWNlbmNpZXMucHVzaChbc3RhcnRbMF0rMSwgc3RhcnRbMV0tMV0pO1xuXG4gICAgICAgICAgICAvL2FkZCBjb29yZGluYXRlcyBiZWxvdyBlbmRcbiAgICAgICAgICAgIGFkamFjZW5jaWVzLnB1c2goW2VuZFswXSwgZW5kWzFdKzFdKTtcbiAgICAgICAgICAgIGFkamFjZW5jaWVzLnB1c2goW2VuZFswXS0xLCBlbmRbMV0rMV0pO1xuICAgICAgICAgICAgYWRqYWNlbmNpZXMucHVzaChbZW5kWzBdKzEsIGVuZFsxXSsxXSk7XG5cbiAgICAgICAgICAgIGhpdFBvaW50cy5mb3JFYWNoKGNvb3JkaW5hdGUgPT4ge1xuXG4gICAgICAgICAgICAgICAgYWRqYWNlbmNpZXMucHVzaChbY29vcmRpbmF0ZVswXSsxLCBjb29yZGluYXRlWzFdXSk7XG4gICAgICAgICAgICAgICAgYWRqYWNlbmNpZXMucHVzaChbY29vcmRpbmF0ZVswXS0xLCBjb29yZGluYXRlWzFdXSk7XG5cbiAgICAgICAgICAgIH0pXG5cbiAgICAgICAgICAgIHJldHVybiBhZGphY2VuY2llcztcblxuICAgICAgICB9XG5cbiAgICB9XG5cbiAgICBjb25zdCBhZGphY2VudCA9IGdldEFkamFjZW50KCk7XG5cbiAgICBmdW5jdGlvbiByb3RhdGUoKSB7XG4gICAgICAgIGlmIChvcmllbnRhdGlvbiA9PSAwKSB7XG4gICAgICAgICAgICByZXR1cm4gc2hpcDIoYzEsIGxlbmd0aCwgMSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gc2hpcDIoYzEsIGxlbmd0aCwgMCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvL2NoZWNrcyB0byBzZWUgaWYgY29vcmRpbmF0ZXMgaGl0LCByZXR1cm5zIFt0cnVlL2ZhbHNlLCBjb29yZGluYXRlXVxuICAgIGZ1bmN0aW9uIGhpdChjKSB7XG4gICAgICAgIGNvbnN0IGNTdHJpbmcgPSBjLnRvU3RyaW5nKClcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBoaXRQb2ludHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGlmIChoaXRQb2ludHNbaV0udG9TdHJpbmcoKSA9PSBjU3RyaW5nKSB7XG4gICAgICAgICAgICAgICAgaGl0cy5wdXNoKGMpO1xuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9IFxuXG4gICAgZnVuY3Rpb24gaXNTdW5rKCkge1xuICAgICAgICBpZiAoaGl0cy5sZW5ndGggPT0gbGVuZ3RoKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgICAgbGVuZ3RoOiBsZW5ndGgsXG4gICAgICAgIGhpdFBvaW50czogaGl0UG9pbnRzLFxuICAgICAgICBoaXRzOiBoaXRzLFxuICAgICAgICBhZGphY2VudDogYWRqYWNlbnQsXG4gICAgICAgIG9yaWVudGF0aW9uOiBvcmllbnRhdGlvbixcbiAgICAgICAgcm90YXRlLFxuICAgICAgICBpc1N1bmssXG4gICAgICAgIGhpdCxcbiAgICB9O1xuXG59XG5cbi8vc2hpcCBvYmplY3QgaW5pdGlhbGl6ZWQgd2l0aCBvbmUgY29vcmRpbmF0ZSwgb3JpZW50YXRpb24gYW5kIGxlbmd0aFxuZnVuY3Rpb24gc2hpcDIoYzEsIGxlbmd0aCwgb3JpZW50YXRpb24pIHtcbiAgICBsZXQgYzIgPSBbXVxuICAgIGlmIChvcmllbnRhdGlvbiA9PSAwKSB7XG4gICAgICAgIGMyLnB1c2goYzFbMF0rbGVuZ3RoLTEpO1xuICAgICAgICBjMi5wdXNoKGMxWzFdKTtcbiAgICAgICAgcmV0dXJuIHNoaXAoYzEsYzIpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgYzIucHVzaChjMVswXSk7XG4gICAgICAgIGMyLnB1c2goYzFbMV0rbGVuZ3RoLTEpXG4gICAgICAgIHJldHVybiBzaGlwKGMxLGMyKTtcbiAgICB9XG59XG5cbi8vZ2FtZWJvYXJkIGZhY3RvcnkgZnVuY3Rpb25cbi8vcGxhY2VzIHNoaXBzIGFyZSBjZXJ0YWluIGNvb3JkaW5hdGVzXG4vL3JlY2VpdmVzQXR0YWNrcyBmdW5jdGlvbiB3aGljaCB0YWtlcyBhIGNvb3JkaW5hdGUgYW5kIGVpdGhlciBoaXRzIHRoZSBzaGlwIGF0IHNhaWQgY29vcmRpbmF0ZSBvciByZWNvcmRzIG1pc3NlZCBhdHRhY2tcbi8vcmVwb3J0cyB3aGV0aGVyIG9yIG5vdCBhbGwgc2hpcHMgaGF2ZSBiZWVuIHN1bmtcblxuZnVuY3Rpb24gZ2FtZUJvYXJkKCkge1xuXG4gICAgbGV0IHNoaXBzID0gW107XG4gICAgbGV0IHNoaXBzQyA9IFtdXG4gICAgbGV0IGFkamFjZW50ID0gW107XG4gICAgbGV0IG1pc3NlcyA9IFtdO1xuICAgIGxldCBoaXRzID0gW107XG5cbiAgICAvL3Rha2VzIGEgbGVuZ3RoIGFuZCBkaXJlY3Rpb24gKDAgLSB2ZXJ0aWNhbCwgMSAtIGhvcml6b250YWwpIGFuZCBnZW5lcmF0ZXMgYSByYW5kb20gc2hpcFxuICAgIGZ1bmN0aW9uIHJhbmRvbVNoaXAobGVuZ3RoLCBkaXJlY3Rpb24pIHtcbiAgICAgICAgXG4gICAgICAgIGlmIChkaXJlY3Rpb24gPT0gMCkge1xuICAgICAgICAgICAgY29uc3QgYzEgPSBnZXRDb29yZGluYXRlcyg5IC0gbGVuZ3RoLCA5KTtcbiAgICAgICAgICAgIGNvbnN0IGMyID0gW107XG4gICAgICAgICAgICBjMi5wdXNoKGMxWzBdK2xlbmd0aC0xKTtcbiAgICAgICAgICAgIGMyLnB1c2goYzFbMV0pO1xuICAgICAgICAgICAgcmV0dXJuIHNoaXAoYzEsYzIpO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgYzEgPSBnZXRDb29yZGluYXRlcyg5LCA5IC0gbGVuZ3RoKTtcbiAgICAgICAgY29uc3QgYzIgPSBbXTtcbiAgICAgICAgYzIucHVzaChjMVswXSk7XG4gICAgICAgIGMyLnB1c2goYzFbMV0rbGVuZ3RoLTEpO1xuICAgICAgICByZXR1cm4gc2hpcChjMSxjMik7XG4gICAgfVxuXG4gICAgLy9jaGVja3MgaWYgc2hpcCBjb29yZGluYXRlcyBhbHJlYWR5IGluIHRoZSBCb2FyZCBvciBpZiBjb29yZGluYXRlcyBvdXQgb2YgYm91bmRzLlxuICAgIGZ1bmN0aW9uIGNoZWNrU2hpcChzaGlwKSB7XG5cbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzaGlwLmxlbmd0aDsgaSsrKSB7XG5cbiAgICAgICAgICAgIGlmIChzaGlwc0Muc29tZSggYyA9PiBjLnRvU3RyaW5nKCkgPT0gc2hpcC5oaXRQb2ludHNbaV0udG9TdHJpbmcoKSkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChhZGphY2VudC5zb21lKCBjID0+IGMudG9TdHJpbmcoKSA9PSBzaGlwLmhpdFBvaW50c1tpXS50b1N0cmluZygpKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICB9XG5cbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzaGlwLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGxldCBjb29yZGluYXRlID0gc2hpcC5oaXRQb2ludHNbaV07XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGlmIChjb29yZGluYXRlLnNvbWUoYyA9PiBjIDwgMCB8fCBjID4gOSkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0cnVlO1xuXG4gICAgfVxuXG4gICAgLy9hZGRzIHNoaXAgdG8gc2hpcHMgYXJyYXlcbiAgICBmdW5jdGlvbiBwbGFjZVNoaXAoc2hpcCkge1xuICAgICAgICBcbiAgICAgICAgc2hpcC5oaXRQb2ludHMuZm9yRWFjaChjb29yZGluYXRlID0+IHtcbiAgICAgICAgICAgIHNoaXBzQy5wdXNoKGNvb3JkaW5hdGUpO1xuICAgICAgICB9KVxuICAgICAgICBcbiAgICAgICAgc2hpcC5hZGphY2VudC5mb3JFYWNoKCBjID0+IHtcbiAgICAgICAgICAgIGFkamFjZW50LnB1c2goYyk7XG4gICAgICAgIH0pO1xuICAgICAgICBzaGlwcy5wdXNoKHNoaXApO1xuICAgIH1cblxuICAgIC8vY2hlY2tzIHRvIHNlZSBpZiBzaGlwIGlzIHZhbGlkIGJlZm9yZSBwbGFjaW5nLiBSZXR1cm5zIHRydWUgaWYgdmFsaWQsIGZhbHNlIGlmIG5vdC5cbiAgICBmdW5jdGlvbiBwbGFjZVZhbGlkU2hpcChzaGlwKSB7XG4gICAgICAgIGlmIChjaGVja1NoaXAoc2hpcCkpIHtcbiAgICAgICAgICAgIHBsYWNlU2hpcChzaGlwKTtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLy9naXZlbiBhIGNvb3JkaW5hdGUgZmluZCB0aGUgY29ycmVzcG9uZGluZyBzaGlwXG4gICAgZnVuY3Rpb24gZmluZFNoaXAoYykge1xuICAgICAgICBcbiAgICAgICAgcmV0dXJuIHNoaXBzLmZpbmQocyA9PiBzLmhpdFBvaW50cy5maW5kKHggPT4geC50b1N0cmluZygpID09IGMudG9TdHJpbmcoKSkpXG5cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBmaW5kU2hpcEluZGV4KGMpIHtcblxuICAgICAgICByZXR1cm4gc2hpcHMuZmluZEluZGV4KHMgPT4gcy5oaXRQb2ludHMuZmluZCh4ID0+IHgudG9TdHJpbmcoKSA9PSBjLnRvU3RyaW5nKCkpKVxuXG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcmVtb3ZlU2hpcChjKSB7XG5cbiAgICAgICAgY29uc3QgaSA9IGZpbmRTaGlwSW5kZXgoYyk7XG4gICAgICAgIGNvbnN0IHJTaGlwID0gZmluZFNoaXAoYyk7XG4gICAgICAgIHNoaXBzLnNwbGljZShpLDEpO1xuICAgICAgICByZW1vdmVBZGphY2VudChyU2hpcCk7XG4gICAgICAgIHJlbW92ZVNoaXBDKHJTaGlwKTtcblxuICAgICAgICByZXR1cm4gclNoaXA7XG5cbiAgICB9XG5cbiAgICBmdW5jdGlvbiByZW1vdmVBZGphY2VudChzaGlwKSB7XG4gICAgICAgIHNoaXAuYWRqYWNlbnQuZm9yRWFjaChjID0+IHtcblxuICAgICAgICAgICAgbGV0IGkgPSBhZGphY2VudC5maW5kSW5kZXgoY29vcmRpbmF0ZSA9PiBjb29yZGluYXRlLnRvU3RyaW5nKCkgPT0gYy50b1N0cmluZygpKVxuICAgICAgICAgICAgYWRqYWNlbnQuc3BsaWNlKGksMSk7XG5cbiAgICAgICAgfSlcbiAgICB9XG5cbiAgICBmdW5jdGlvbiByZW1vdmVTaGlwQyhzaGlwKSB7XG4gICAgICAgIHNoaXAuaGl0UG9pbnRzLmZvckVhY2goYyA9PiB7XG5cbiAgICAgICAgICAgIGxldCBpID0gc2hpcHNDLmZpbmRJbmRleChjb29yZGluYXRlID0+IGNvb3JkaW5hdGUudG9TdHJpbmcoKSA9PSBjLnRvU3RyaW5nKCkpXG4gICAgICAgICAgICBzaGlwc0Muc3BsaWNlKGksMSk7XG5cbiAgICAgICAgfSlcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBuUmFuZG9tU2hpcHMobiwgc2hpcExlbmd0aCkge1xuXG4gICAgICAgIGNvbnN0IG5ld0xlbmd0aCA9IHNoaXBzLmxlbmd0aCArIG47XG5cbiAgICAgICAgd2hpbGUgKHNoaXBzLmxlbmd0aCA8IG5ld0xlbmd0aCkge1xuICAgICAgICAgICAgbGV0IHNoaXAxID0gcmFuZG9tU2hpcChzaGlwTGVuZ3RoLCBnZXRSYW5kb21JbnQoMikpO1xuICAgICAgICAgICAgcGxhY2VWYWxpZFNoaXAoc2hpcDEpO1xuICAgICAgICB9XG5cbiAgICB9XG5cbiAgICAvL2NhbGxzIHNoaXAuaGl0KCkgZm9yIGFsbCBzaGlwcyBhbmQgdXBkYXRlcyBoaXRzIG9yIG1pc3Nlc1xuICAgIGZ1bmN0aW9uIHJlY2VpdmVBdHRhY2soYykge1xuXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc2hpcHMubGVuZ3RoOyBpKyspIHtcblxuICAgICAgICAgICAgaWYgKHNoaXBzW2ldLmhpdChjKSkge1xuICAgICAgICAgICAgICAgIGhpdHMucHVzaChjKTtcbiAgICAgICAgICAgICAgICByZXR1cm5cblxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIG1pc3Nlcy5wdXNoKGMpO1xuICAgIH1cblxuICAgIC8vY2hlY2tzIHRvIHNlZSBpZiBhbGwgc2hpcHMgYXJlIHN1bmtcbiAgICBmdW5jdGlvbiBzdW5rQWxsKCkge1xuICAgICAgICBpZiAoaGl0cy5sZW5ndGggPT0gc2hpcHNDLmxlbmd0aCkge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4ge3NoaXBzOiBzaGlwcywgXG4gICAgICAgICAgICBzaGlwc0M6IHNoaXBzQyxcbiAgICAgICAgICAgIGhpdHM6IGhpdHMsXG4gICAgICAgICAgICBtaXNzZXM6IG1pc3NlcyxcbiAgICAgICAgICAgIGFkamFjZW50OiBhZGphY2VudCxcbiAgICAgICAgICAgIHBsYWNlVmFsaWRTaGlwLFxuICAgICAgICAgICAgZmluZFNoaXAsXG4gICAgICAgICAgICBmaW5kU2hpcEluZGV4LFxuICAgICAgICAgICAgcmVtb3ZlU2hpcCxcbiAgICAgICAgICAgIG5SYW5kb21TaGlwcyxcbiAgICAgICAgICAgIHJhbmRvbVNoaXAsXG4gICAgICAgICAgICBzdW5rQWxsLFxuICAgICAgICAgICAgcmVjZWl2ZUF0dGFjayxcbiAgICB9O1xuXG59XG5cbmZ1bmN0aW9uIEFJKCkge1xuXG4gICAgY29uc3QgYm9hcmQgPSBnYW1lQm9hcmQoKVxuXG4gICAgZnVuY3Rpb24gcG9wdWxhdGVCb2FyZCgpIHtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBwbGF5KCkge1xuICAgICAgICByZXR1cm4gZ2V0Q29vcmRpbmF0ZXMoOSw5KTtcbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgICAgICAgcGxheSxcbiAgICAgICAgICAgIGJvYXJkOiBib2FyZCxcbiAgICB9XG5cbn1cblxuLy9nYW1lcGxheSBsb29wXG5mdW5jdGlvbiBnYW1lKHAxQm9hcmQsIHAyQm9hcmQpIHtcblxuICAgIHdoaWxlIChwMUJvYXJkLnN1bmtBbGwoKSAmJiBwMkJvYXJkLnN1bmtBbGwoKSkge1xuICAgICAgICBwMS5wbGF5XG4gICAgICAgIHAyLnBsYXlcbiAgICB9XG5cbn1cblxuXG5cblxuZXhwb3J0IHtzaGlwLCBzaGlwMiwgZ2FtZUJvYXJkLCBBSX07XG5cbiIsImltcG9ydCB7c2hpcCwgc2hpcDIsIGdhbWVCb2FyZCwgQUl9IGZyb20gJy4vZ2FtZS1sb2dpYy5qcyc7XG5cblxuZnVuY3Rpb24gaW5pdElucHV0KGdiKSB7XG5cbiAgICBhZGRDb29yZGluYXRlcyhnYik7XG4gICAgYWRkQWRqYWNlbnQoZ2IpO1xuICAgIGFkZFNoaXBzKGdiKTtcbiAgICBkcmFnKGdiKTtcbiAgICByb3RhdGUoZ2IpO1xufVxuXG5mdW5jdGlvbiBhZGRDb29yZGluYXRlcyhnYikge1xuICAgIFxuICAgIGdiLnNoaXBzQy5mb3JFYWNoKGNvb3JkaW5hdGUgPT4ge1xuXG4gICAgICAgIGxldCB4ID0gY29vcmRpbmF0ZVswXTtcbiAgICAgICAgbGV0IHkgPSBjb29yZGluYXRlWzFdO1xuICAgICAgICBcbiAgICAgICAgY29uc3QgY2VsbCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoYFt4PScke3h9J11beT0nJHt5fSddYCk7XG4gICAgICAgIFxuICAgICAgICBjZWxsLmNsYXNzTGlzdC5hZGQoJ2FjdGl2ZScpO1xuICAgICAgICBcbiAgICAgICAgfSlcbn1cblxuZnVuY3Rpb24gYWRkQWRqYWNlbnQoZ2IpIHtcbiAgICBcbiAgICBnYi5hZGphY2VudC5mb3JFYWNoKGNvb3JkaW5hdGUgPT4ge1xuXG4gICAgICAgIGxldCB4ID0gY29vcmRpbmF0ZVswXTtcbiAgICAgICAgbGV0IHkgPSBjb29yZGluYXRlWzFdO1xuICAgICAgICBcbiAgICAgICAgLy9jaGVjayBpZiBpbiByYW5nZVxuICAgICAgICBpZiAoeCA+PSAwICYmIHggPD0gOSAmJiB5ID49IDAgJiYgeSA8PSA5KSB7XG5cbiAgICAgICAgICAgIGNvbnN0IGNlbGwgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGBbeD0nJHt4fSddW3k9JyR7eX0nXWApO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBjZWxsLmNsYXNzTGlzdC5hZGQoJ2FkamFjZW50Jyk7XG5cbiAgICAgICAgfVxuICAgICAgICBcbiAgICB9KVxufVxuXG5mdW5jdGlvbiBhZGRTaGlwcyhnYikge1xuICAgIGdiLnNoaXBzLmZvckVhY2goIHMgPT4ge1xuXG4gICAgICAgIHMuaGl0UG9pbnRzLnNvcnQoKTtcbiAgICAgICAgbGV0IHggPSBzLmhpdFBvaW50c1swXVswXTtcbiAgICAgICAgbGV0IHkgPSBzLmhpdFBvaW50c1swXVsxXTtcbiAgICAgICAgY29uc3QgbGVuZ3RoID0gcy5sZW5ndGgqMzA7XG4gICAgICAgIGNvbnN0IG9yaWVudGF0aW9uID0gcy5vcmllbnRhdGlvbjtcblxuICAgICAgICBjb25zdCBjZWxsID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihgW3g9JyR7eH0nXVt5PScke3l9J11gKTtcbiAgICAgICAgY29uc3QgZHJhZyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpXG4gICAgICAgIGRyYWcuY2xhc3NMaXN0LmFkZCgnZHJhZycpO1xuICAgICAgICBkcmFnLnNldEF0dHJpYnV0ZSgnZHJhZ2dhYmxlJywgJ3RydWUnKTtcbiAgICAgICAgZHJhZy5zZXRBdHRyaWJ1dGUoJ29yaWVudGF0aW9uJywgYCR7cy5vcmllbnRhdGlvbn1gKTtcbiAgICAgICAgZHJhZy5zZXRBdHRyaWJ1dGUoJ2xlbmd0aCcsIGAke3MubGVuZ3RofWApXG5cbiAgICAgICAgaWYgKG9yaWVudGF0aW9uID09IDApIHtcbiAgICAgICAgICAgIGRyYWcuc3R5bGUud2lkdGggPSBgJHtsZW5ndGh9cHhgO1xuICAgICAgICAgICAgZHJhZy5zdHlsZS5oZWlnaHQgPSBgMjhweGA7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBkcmFnLnN0eWxlLmhlaWdodCA9IGAke2xlbmd0aH1weGA7XG4gICAgICAgICAgICBkcmFnLnN0eWxlLndpZHRoID0gYDI4cHhgO1xuICAgICAgICB9XG5cbiAgICAgICAgY2VsbC5hcHBlbmRDaGlsZChkcmFnKTtcbiAgICB9KVxufVxuXG5mdW5jdGlvbiBkcmFnKGdiKSB7XG5cbmxldCBkcmFnZ2VkID0gbnVsbDtcbmxldCByU2hpcCA9IG51bGw7XG5cbmRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2RyYWdzdGFydCcsIChlKSA9PiB7XG4gICAgXG4gICAgZHJhZ2dlZCA9IGUudGFyZ2V0O1xuICAgIGxldCB4ID0gcGFyc2VJbnQoZHJhZ2dlZC5wYXJlbnROb2RlLmdldEF0dHJpYnV0ZSgneCcpKTtcbiAgICBsZXQgeSA9IHBhcnNlSW50KGRyYWdnZWQucGFyZW50Tm9kZS5nZXRBdHRyaWJ1dGUoJ3knKSk7XG4gICAgclNoaXAgPSBnYi5yZW1vdmVTaGlwKFt4LHldKTtcbiAgICByZW1vdmVTaGlwRE9NKHJTaGlwKTtcbiAgICBhZGRBZGphY2VudChnYik7XG5cbn0pXG5cbmRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJkcmFnb3ZlclwiLCAoZSkgPT4ge1xuICAgXG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuXG4gIH0pO1xuXG5kb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdkcm9wJywgKGUpID0+IHtcblxuICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICBcbiAgICBsZXQgbmV3Q2VsbCA9IGUudGFyZ2V0O1xuICAgIGlmIChuZXdDZWxsLmNsYXNzTmFtZSA9PSAnZHJhZycpIHtcbiAgICAgICAgbmV3Q2VsbCA9IG5ld0NlbGwucGFyZW50Tm9kZVxuICAgIH1cblxuICAgIGxldCB4ID0gcGFyc2VJbnQobmV3Q2VsbC5nZXRBdHRyaWJ1dGUoJ3gnKSk7XG4gICAgbGV0IHkgPSBwYXJzZUludChuZXdDZWxsLmdldEF0dHJpYnV0ZSgneScpKTtcbiAgICBjb25zdCBsID0gcGFyc2VJbnQoZHJhZ2dlZC5nZXRBdHRyaWJ1dGUoJ2xlbmd0aCcpKTtcbiAgICBjb25zdCBvID0gcGFyc2VJbnQoZHJhZ2dlZC5nZXRBdHRyaWJ1dGUoJ29yaWVudGF0aW9uJykpO1xuXG4gICAgY29uc3QgbmV3U2hpcCA9IHNoaXAyKFt4LHldLCBsLCBvKTtcblxuICAgIGlmIChnYi5wbGFjZVZhbGlkU2hpcChuZXdTaGlwKSkge1xuXG4gICAgICAgIGRyYWdnZWQucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChkcmFnZ2VkKTtcbiAgICAgICAgbmV3Q2VsbC5hcHBlbmRDaGlsZChkcmFnZ2VkKTtcbiAgICAgICAgYWRkU2hpcERPTShuZXdTaGlwKTtcbiAgICB9XG5cbiAgICBlbHNlIHtcbiAgICAgICAgYWRkU2hpcERPTShyU2hpcCk7XG4gICAgICAgIGdiLnBsYWNlVmFsaWRTaGlwKHJTaGlwKTtcbiAgICB9XG5cbn0pXG5cbn1cblxuZnVuY3Rpb24gcmVtb3ZlU2hpcERPTShzKSB7XG5cbiAgICBzLmFkamFjZW50LmZvckVhY2goY29vcmRpbmF0ZSA9PiB7XG5cbiAgICAgICAgbGV0IHggPSBjb29yZGluYXRlWzBdO1xuICAgICAgICBsZXQgeSA9IGNvb3JkaW5hdGVbMV07XG5cbiAgICAgICAgLy9jaGVjayBpZiBpbiByYW5nZVxuICAgICAgICBpZiAoeCA+PSAwICYmIHggPD0gOSAmJiB5ID49IDAgJiYgeSA8PSA5KSB7XG5cbiAgICAgICAgICAgIGNvbnN0IGNlbGwgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGBbeD0nJHt4fSddW3k9JyR7eX0nXWApO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBjZWxsLmNsYXNzTGlzdC5yZW1vdmUoJ2FkamFjZW50Jyk7XG5cbiAgICAgICAgfVxuXG4gICAgfSlcblxuICAgIHMuaGl0UG9pbnRzLmZvckVhY2goY29vcmRpbmF0ZSA9PiB7XG5cbiAgICAgICAgbGV0IHggPSBjb29yZGluYXRlWzBdO1xuICAgICAgICBsZXQgeSA9IGNvb3JkaW5hdGVbMV07XG5cbiAgICAgICAgY29uc3QgY2VsbCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoYFt4PScke3h9J11beT0nJHt5fSddYCk7XG4gICAgICAgICAgICBcbiAgICAgICAgY2VsbC5jbGFzc0xpc3QucmVtb3ZlKCdhY3RpdmUnKTtcblxuICAgIH0pXG59XG5cbmZ1bmN0aW9uIGFkZFNoaXBET00ocykge1xuXG4gICAgcy5hZGphY2VudC5mb3JFYWNoKGNvb3JkaW5hdGUgPT4ge1xuXG4gICAgICAgIGxldCB4ID0gY29vcmRpbmF0ZVswXTtcbiAgICAgICAgbGV0IHkgPSBjb29yZGluYXRlWzFdO1xuXG4gICAgICAgIC8vY2hlY2sgaWYgaW4gcmFuZ2VcbiAgICAgICAgaWYgKHggPj0gMCAmJiB4IDw9IDkgJiYgeSA+PSAwICYmIHkgPD0gOSkge1xuXG4gICAgICAgICAgICBjb25zdCBjZWxsID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihgW3g9JyR7eH0nXVt5PScke3l9J11gKTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgY2VsbC5jbGFzc0xpc3QuYWRkKCdhZGphY2VudCcpO1xuXG4gICAgICAgIH1cblxuICAgIH0pXG5cbiAgICBzLmhpdFBvaW50cy5mb3JFYWNoKGNvb3JkaW5hdGUgPT4ge1xuXG4gICAgICAgIGxldCB4ID0gY29vcmRpbmF0ZVswXTtcbiAgICAgICAgbGV0IHkgPSBjb29yZGluYXRlWzFdO1xuXG4gICAgICAgIGNvbnN0IGNlbGwgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGBbeD0nJHt4fSddW3k9JyR7eX0nXWApO1xuICAgICAgICAgICAgXG4gICAgICAgIGNlbGwuY2xhc3NMaXN0LmFkZCgnYWN0aXZlJyk7XG5cbiAgICB9KVxuXG59XG5cbmZ1bmN0aW9uIHJvdGF0ZShnYikge1xuICAgIFxuICAgIGNvbnN0IHNoaXBzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLmRyYWcnKTtcbiAgICBzaGlwcy5mb3JFYWNoKHMgPT4ge1xuXG4gICAgICAgIHMuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBlID0+IHtcblxuICAgICAgICAvL2dldHRpbmcgcGFyYW1ldGVycyBmb3Igc2hpcFxuICAgICAgICBcbiAgICAgICAgY29uc29sZS5sb2coJ2NsaWNrJylcbiAgICAgICAgY29uc3QgZHJhZ0RpdiA9IGUudGFyZ2V0O1xuICAgICAgICBjb25zdCB4ID0gcGFyc2VJbnQoZHJhZ0Rpdi5wYXJlbnROb2RlLmdldEF0dHJpYnV0ZSgneCcpKTtcbiAgICAgICAgY29uc3QgeSA9IHBhcnNlSW50KGRyYWdEaXYucGFyZW50Tm9kZS5nZXRBdHRyaWJ1dGUoJ3knKSk7XG4gICAgICAgIGNvbnN0IGwgPSBwYXJzZUludChkcmFnRGl2LmdldEF0dHJpYnV0ZSgnbGVuZ3RoJykpO1xuICAgICAgICBjb25zdCBvID0gcGFyc2VJbnQoZHJhZ0Rpdi5nZXRBdHRyaWJ1dGUoJ29yaWVudGF0aW9uJykpO1xuXG4gICAgICAgIGxldCBjdXJyZW50U2hpcCA9IHNoaXAyKFt4LHldLCBsLCBvKTtcbiAgICAgICAgY29uc29sZS5sb2coY3VycmVudFNoaXApO1xuICAgICAgICBsZXQgbmV3U2hpcCA9IGN1cnJlbnRTaGlwLnJvdGF0ZSgpO1xuICAgICAgICBnYi5yZW1vdmVTaGlwKFt4LHldKTtcblxuICAgICAgICAvL2lmIG5ldyBzaGlwIGlzIGEgdmFsaWQgcGxhY2VtZW50XG4gICAgICAgIGlmIChnYi5wbGFjZVZhbGlkU2hpcChuZXdTaGlwKSkge1xuICAgICAgICAgICAgcmVtb3ZlU2hpcERPTShjdXJyZW50U2hpcCk7XG4gICAgICAgICAgICBhZGRTaGlwRE9NKG5ld1NoaXApO1xuICAgICAgICAgICAgZHJhZ0Rpdi5zZXRBdHRyaWJ1dGUoJ29yaWVudGF0aW9uJywgYCR7bmV3U2hpcC5vcmllbnRhdGlvbn1gKVxuXG4gICAgICAgICAgICBpZiAobmV3U2hpcC5vcmllbnRhdGlvbiA9PSAwKSB7XG4gICAgICAgICAgICAgICAgZHJhZ0Rpdi5zdHlsZS53aWR0aCA9IGAkezMwKm5ld1NoaXAubGVuZ3RofXB4YDtcbiAgICAgICAgICAgICAgICBkcmFnRGl2LnN0eWxlLmhlaWdodCA9IGAyOHB4YDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGRyYWdEaXYuc3R5bGUuaGVpZ2h0ID0gYCR7MzAqbmV3U2hpcC5sZW5ndGh9cHhgO1xuICAgICAgICAgICAgICAgIGRyYWdEaXYuc3R5bGUud2lkdGggPSBgMjhweGA7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfVxuXG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgZ2IucGxhY2VWYWxpZFNoaXAoY3VycmVudFNoaXApO1xuICAgICAgICB9XG5cbiAgICAgICAgfSlcblxuICAgIH0pXG5cbn1cblxuXG5leHBvcnQge2luaXRJbnB1dH1cblxuXG5cbiIsIlxuICAgICAgaW1wb3J0IEFQSSBmcm9tIFwiIS4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiO1xuICAgICAgaW1wb3J0IGRvbUFQSSBmcm9tIFwiIS4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlRG9tQVBJLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0Rm4gZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRCeVNlbGVjdG9yLmpzXCI7XG4gICAgICBpbXBvcnQgc2V0QXR0cmlidXRlcyBmcm9tIFwiIS4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3NldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcy5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydFN0eWxlRWxlbWVudCBmcm9tIFwiIS4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydFN0eWxlRWxlbWVudC5qc1wiO1xuICAgICAgaW1wb3J0IHN0eWxlVGFnVHJhbnNmb3JtRm4gZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZVRhZ1RyYW5zZm9ybS5qc1wiO1xuICAgICAgaW1wb3J0IGNvbnRlbnQsICogYXMgbmFtZWRFeHBvcnQgZnJvbSBcIiEhLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9zdHlsZS5jc3NcIjtcbiAgICAgIFxuICAgICAgXG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuc3R5bGVUYWdUcmFuc2Zvcm0gPSBzdHlsZVRhZ1RyYW5zZm9ybUZuO1xub3B0aW9ucy5zZXRBdHRyaWJ1dGVzID0gc2V0QXR0cmlidXRlcztcblxuICAgICAgb3B0aW9ucy5pbnNlcnQgPSBpbnNlcnRGbi5iaW5kKG51bGwsIFwiaGVhZFwiKTtcbiAgICBcbm9wdGlvbnMuZG9tQVBJID0gZG9tQVBJO1xub3B0aW9ucy5pbnNlcnRTdHlsZUVsZW1lbnQgPSBpbnNlcnRTdHlsZUVsZW1lbnQ7XG5cbnZhciB1cGRhdGUgPSBBUEkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuXG5leHBvcnQgKiBmcm9tIFwiISEuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL3N0eWxlLmNzc1wiO1xuICAgICAgIGV4cG9ydCBkZWZhdWx0IGNvbnRlbnQgJiYgY29udGVudC5sb2NhbHMgPyBjb250ZW50LmxvY2FscyA6IHVuZGVmaW5lZDtcbiIsImltcG9ydCB7c2hpcCwgZ2FtZUJvYXJkLCBBSX0gZnJvbSAnLi9nYW1lLWxvZ2ljLmpzJztcbmltcG9ydCB7aW5pdElucHV0LCBkcmFnfSBmcm9tICcuL2RvbS5qcyc7XG5pbXBvcnQgJy4vc3R5bGUuY3NzJztcblxuZnVuY3Rpb24gZ2V0UmFuZG9tSW50KG1heCkge1xuICAgIHJldHVybiBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiBtYXgpO1xufVxuXG5jb25zdCBnYW1lQm9hcmQxID0gZ2FtZUJvYXJkKCk7XG5cbmdhbWVCb2FyZDEublJhbmRvbVNoaXBzKDEsNClcbmdhbWVCb2FyZDEublJhbmRvbVNoaXBzKDIsMylcbmdhbWVCb2FyZDEublJhbmRvbVNoaXBzKDMsMilcbmdhbWVCb2FyZDEublJhbmRvbVNoaXBzKDQsMSlcblxuaW5pdElucHV0KGdhbWVCb2FyZDEpXG5cbmNvbnNvbGUubG9nKGdhbWVCb2FyZDEpOyJdLCJuYW1lcyI6WyJfX19DU1NfTE9BREVSX0VYUE9SVF9fXyIsInB1c2giLCJtb2R1bGUiLCJpZCIsImV4cG9ydHMiLCJjc3NXaXRoTWFwcGluZ1RvU3RyaW5nIiwibGlzdCIsInRvU3RyaW5nIiwidGhpcyIsIm1hcCIsIml0ZW0iLCJjb250ZW50IiwibmVlZExheWVyIiwiY29uY2F0IiwibGVuZ3RoIiwiam9pbiIsImkiLCJtb2R1bGVzIiwibWVkaWEiLCJkZWR1cGUiLCJzdXBwb3J0cyIsImxheWVyIiwidW5kZWZpbmVkIiwiYWxyZWFkeUltcG9ydGVkTW9kdWxlcyIsImsiLCJfayIsImNzc01hcHBpbmciLCJidG9hIiwiYmFzZTY0IiwidW5lc2NhcGUiLCJlbmNvZGVVUklDb21wb25lbnQiLCJKU09OIiwic3RyaW5naWZ5IiwiZGF0YSIsInNvdXJjZU1hcHBpbmciLCJzb3VyY2VVUkxzIiwic291cmNlcyIsInNvdXJjZSIsInNvdXJjZVJvb3QiLCJzdHlsZXNJbkRPTSIsImdldEluZGV4QnlJZGVudGlmaWVyIiwiaWRlbnRpZmllciIsInJlc3VsdCIsIm1vZHVsZXNUb0RvbSIsIm9wdGlvbnMiLCJpZENvdW50TWFwIiwiaWRlbnRpZmllcnMiLCJiYXNlIiwiY291bnQiLCJpbmRleEJ5SWRlbnRpZmllciIsIm9iaiIsImNzcyIsInNvdXJjZU1hcCIsInJlZmVyZW5jZXMiLCJ1cGRhdGVyIiwiYWRkRWxlbWVudFN0eWxlIiwiYnlJbmRleCIsInNwbGljZSIsImFwaSIsImRvbUFQSSIsInVwZGF0ZSIsIm5ld09iaiIsInJlbW92ZSIsImxhc3RJZGVudGlmaWVycyIsIm5ld0xpc3QiLCJpbmRleCIsIm5ld0xhc3RJZGVudGlmaWVycyIsIl9pIiwiX2luZGV4IiwibWVtbyIsImluc2VydCIsInN0eWxlIiwidGFyZ2V0Iiwic3R5bGVUYXJnZXQiLCJkb2N1bWVudCIsInF1ZXJ5U2VsZWN0b3IiLCJ3aW5kb3ciLCJIVE1MSUZyYW1lRWxlbWVudCIsImNvbnRlbnREb2N1bWVudCIsImhlYWQiLCJlIiwiZ2V0VGFyZ2V0IiwiRXJyb3IiLCJhcHBlbmRDaGlsZCIsImVsZW1lbnQiLCJjcmVhdGVFbGVtZW50Iiwic2V0QXR0cmlidXRlcyIsImF0dHJpYnV0ZXMiLCJzdHlsZUVsZW1lbnQiLCJub25jZSIsInNldEF0dHJpYnV0ZSIsImluc2VydFN0eWxlRWxlbWVudCIsInN0eWxlVGFnVHJhbnNmb3JtIiwiYXBwbHkiLCJwYXJlbnROb2RlIiwicmVtb3ZlQ2hpbGQiLCJyZW1vdmVTdHlsZUVsZW1lbnQiLCJzdHlsZVNoZWV0IiwiY3NzVGV4dCIsImZpcnN0Q2hpbGQiLCJjcmVhdGVUZXh0Tm9kZSIsIl9fd2VicGFja19tb2R1bGVfY2FjaGVfXyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImNhY2hlZE1vZHVsZSIsIl9fd2VicGFja19tb2R1bGVzX18iLCJuIiwiZ2V0dGVyIiwiX19lc01vZHVsZSIsImQiLCJhIiwiZGVmaW5pdGlvbiIsImtleSIsIm8iLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJnZXQiLCJwcm9wIiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwibmMiLCJnZXRSYW5kb21JbnQiLCJtYXgiLCJNYXRoIiwiZmxvb3IiLCJyYW5kb20iLCJnZXRDb29yZGluYXRlcyIsInhtYXgiLCJ5bWF4Iiwic2hpcCIsImMxIiwiYzIiLCJoaXRzIiwiYWJzIiwiaGl0UG9pbnRzIiwiSFAiLCJnZXRIaXRQb2ludHMiLCJnZXRPcmllbnRhdGlvbiIsIm9yaWVudGF0aW9uIiwiYWRqYWNlbnQiLCJzb3J0Iiwic3RhcnQiLCJlbmQiLCJhZGphY2VuY2llcyIsImZvckVhY2giLCJjb29yZGluYXRlIiwiZ2V0QWRqYWNlbnQiLCJyb3RhdGUiLCJzaGlwMiIsImlzU3VuayIsImhpdCIsImMiLCJjU3RyaW5nIiwiYWRkQWRqYWNlbnQiLCJnYiIsIngiLCJ5IiwiY2xhc3NMaXN0IiwiYWRkIiwicmVtb3ZlU2hpcERPTSIsInMiLCJhZGRTaGlwRE9NIiwiZ2FtZUJvYXJkMSIsInNoaXBzIiwic2hpcHNDIiwibWlzc2VzIiwicmFuZG9tU2hpcCIsImRpcmVjdGlvbiIsInBsYWNlVmFsaWRTaGlwIiwic29tZSIsImNoZWNrU2hpcCIsInBsYWNlU2hpcCIsImZpbmRTaGlwIiwiZmluZCIsImZpbmRTaGlwSW5kZXgiLCJmaW5kSW5kZXgiLCJyZW1vdmVTaGlwIiwiclNoaXAiLCJyZW1vdmVBZGphY2VudCIsInJlbW92ZVNoaXBDIiwiblJhbmRvbVNoaXBzIiwic2hpcExlbmd0aCIsIm5ld0xlbmd0aCIsInN1bmtBbGwiLCJyZWNlaXZlQXR0YWNrIiwiZ2FtZUJvYXJkIiwiYWRkQ29vcmRpbmF0ZXMiLCJjZWxsIiwiZHJhZyIsIndpZHRoIiwiaGVpZ2h0IiwiYWRkU2hpcHMiLCJkcmFnZ2VkIiwiYWRkRXZlbnRMaXN0ZW5lciIsInBhcnNlSW50IiwiZ2V0QXR0cmlidXRlIiwicHJldmVudERlZmF1bHQiLCJuZXdDZWxsIiwiY2xhc3NOYW1lIiwibmV3U2hpcCIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJjb25zb2xlIiwibG9nIiwiZHJhZ0RpdiIsImN1cnJlbnRTaGlwIl0sInNvdXJjZVJvb3QiOiIifQ==