(()=>{"use strict";var n={426:(n,t,e)=>{e.d(t,{Z:()=>s});var r=e(537),o=e.n(r),i=e(645),a=e.n(i)()(o());a.push([n.id,"body {\n    font-family: Arial, Helvetica, sans-serif;\n}\n\n#title {\n    margin: 30px 50px;\n}\n\n#title > h1 {\n    font-size: 3.2rem;\n    margin: 0;\n}\n\n#title > p {\n    margin: 0 3px 0;\n}\n\n.cell-content {\n    width: 28px;\n    height: 28px;\n    z-index: 1;\n    background-color: #E5F3FF;\n}\n\n.cell-content:hover {\n    background-color: white;\n}\n\n.drag {\n    border: 2px solid #1490FD;\n    position: absolute;\n    z-index: 2;\n    margin: -2px;\n    background-color: #C8E4FD;\n}\n\n.drag:hover {\n    cursor: move;\n}\n\ntable {\n    margin: 50px auto 30px auto;\n    border-collapse: collapse;\n}\n\n.active, .adjacent {\n    background-color: white;\n}\n\ntd {\n    border: 1px solid #C8E4FD;\n}\n\n#selection {\n    display: flex;\n    justify-content: center;\n    gap: 30px;\n    width: 320px;\n    height: 40px;\n    margin: auto;\n}\n\nbutton {\n    border: none;\n    border-radius: 0;\n    padding: 10px;\n\n}","",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAAA;IACI,yCAAyC;AAC7C;;AAEA;IACI,iBAAiB;AACrB;;AAEA;IACI,iBAAiB;IACjB,SAAS;AACb;;AAEA;IACI,eAAe;AACnB;;AAEA;IACI,WAAW;IACX,YAAY;IACZ,UAAU;IACV,yBAAyB;AAC7B;;AAEA;IACI,uBAAuB;AAC3B;;AAEA;IACI,yBAAyB;IACzB,kBAAkB;IAClB,UAAU;IACV,YAAY;IACZ,yBAAyB;AAC7B;;AAEA;IACI,YAAY;AAChB;;AAEA;IACI,2BAA2B;IAC3B,yBAAyB;AAC7B;;AAEA;IACI,uBAAuB;AAC3B;;AAEA;IACI,yBAAyB;AAC7B;;AAEA;IACI,aAAa;IACb,uBAAuB;IACvB,SAAS;IACT,YAAY;IACZ,YAAY;IACZ,YAAY;AAChB;;AAEA;IACI,YAAY;IACZ,gBAAgB;IAChB,aAAa;;AAEjB",sourcesContent:["body {\n    font-family: Arial, Helvetica, sans-serif;\n}\n\n#title {\n    margin: 30px 50px;\n}\n\n#title > h1 {\n    font-size: 3.2rem;\n    margin: 0;\n}\n\n#title > p {\n    margin: 0 3px 0;\n}\n\n.cell-content {\n    width: 28px;\n    height: 28px;\n    z-index: 1;\n    background-color: #E5F3FF;\n}\n\n.cell-content:hover {\n    background-color: white;\n}\n\n.drag {\n    border: 2px solid #1490FD;\n    position: absolute;\n    z-index: 2;\n    margin: -2px;\n    background-color: #C8E4FD;\n}\n\n.drag:hover {\n    cursor: move;\n}\n\ntable {\n    margin: 50px auto 30px auto;\n    border-collapse: collapse;\n}\n\n.active, .adjacent {\n    background-color: white;\n}\n\ntd {\n    border: 1px solid #C8E4FD;\n}\n\n#selection {\n    display: flex;\n    justify-content: center;\n    gap: 30px;\n    width: 320px;\n    height: 40px;\n    margin: auto;\n}\n\nbutton {\n    border: none;\n    border-radius: 0;\n    padding: 10px;\n\n}"],sourceRoot:""}]);const s=a},645:n=>{n.exports=function(n){var t=[];return t.toString=function(){return this.map((function(t){var e="",r=void 0!==t[5];return t[4]&&(e+="@supports (".concat(t[4],") {")),t[2]&&(e+="@media ".concat(t[2]," {")),r&&(e+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),e+=n(t),r&&(e+="}"),t[2]&&(e+="}"),t[4]&&(e+="}"),e})).join("")},t.i=function(n,e,r,o,i){"string"==typeof n&&(n=[[null,n,void 0]]);var a={};if(r)for(var s=0;s<this.length;s++){var c=this[s][0];null!=c&&(a[c]=!0)}for(var u=0;u<n.length;u++){var l=[].concat(n[u]);r&&a[l[0]]||(void 0!==i&&(void 0===l[5]||(l[1]="@layer".concat(l[5].length>0?" ".concat(l[5]):""," {").concat(l[1],"}")),l[5]=i),e&&(l[2]?(l[1]="@media ".concat(l[2]," {").concat(l[1],"}"),l[2]=e):l[2]=e),o&&(l[4]?(l[1]="@supports (".concat(l[4],") {").concat(l[1],"}"),l[4]=o):l[4]="".concat(o)),t.push(l))}},t}},537:n=>{n.exports=function(n){var t=n[1],e=n[3];if(!e)return t;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(e)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),i="/*# ".concat(o," */"),a=e.sources.map((function(n){return"/*# sourceURL=".concat(e.sourceRoot||"").concat(n," */")}));return[t].concat(a).concat([i]).join("\n")}return[t].join("\n")}},379:n=>{var t=[];function e(n){for(var e=-1,r=0;r<t.length;r++)if(t[r].identifier===n){e=r;break}return e}function r(n,r){for(var i={},a=[],s=0;s<n.length;s++){var c=n[s],u=r.base?c[0]+r.base:c[0],l=i[u]||0,p="".concat(u," ").concat(l);i[u]=l+1;var d=e(p),A={css:c[1],media:c[2],sourceMap:c[3],supports:c[4],layer:c[5]};if(-1!==d)t[d].references++,t[d].updater(A);else{var h=o(A,r);r.byIndex=s,t.splice(s,0,{identifier:p,updater:h,references:1})}a.push(p)}return a}function o(n,t){var e=t.domAPI(t);return e.update(n),function(t){if(t){if(t.css===n.css&&t.media===n.media&&t.sourceMap===n.sourceMap&&t.supports===n.supports&&t.layer===n.layer)return;e.update(n=t)}else e.remove()}}n.exports=function(n,o){var i=r(n=n||[],o=o||{});return function(n){n=n||[];for(var a=0;a<i.length;a++){var s=e(i[a]);t[s].references--}for(var c=r(n,o),u=0;u<i.length;u++){var l=e(i[u]);0===t[l].references&&(t[l].updater(),t.splice(l,1))}i=c}}},569:n=>{var t={};n.exports=function(n,e){var r=function(n){if(void 0===t[n]){var e=document.querySelector(n);if(window.HTMLIFrameElement&&e instanceof window.HTMLIFrameElement)try{e=e.contentDocument.head}catch(n){e=null}t[n]=e}return t[n]}(n);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(e)}},216:n=>{n.exports=function(n){var t=document.createElement("style");return n.setAttributes(t,n.attributes),n.insert(t,n.options),t}},565:(n,t,e)=>{n.exports=function(n){var t=e.nc;t&&n.setAttribute("nonce",t)}},795:n=>{n.exports=function(n){var t=n.insertStyleElement(n);return{update:function(e){!function(n,t,e){var r="";e.supports&&(r+="@supports (".concat(e.supports,") {")),e.media&&(r+="@media ".concat(e.media," {"));var o=void 0!==e.layer;o&&(r+="@layer".concat(e.layer.length>0?" ".concat(e.layer):""," {")),r+=e.css,o&&(r+="}"),e.media&&(r+="}"),e.supports&&(r+="}");var i=e.sourceMap;i&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),t.styleTagTransform(r,n,t.options)}(t,n,e)},remove:function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(t)}}}},589:n=>{n.exports=function(n,t){if(t.styleSheet)t.styleSheet.cssText=n;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(n))}}}},t={};function e(r){var o=t[r];if(void 0!==o)return o.exports;var i=t[r]={id:r,exports:{}};return n[r](i,i.exports,e),i.exports}e.n=n=>{var t=n&&n.__esModule?()=>n.default:()=>n;return e.d(t,{a:t}),t},e.d=(n,t)=>{for(var r in t)e.o(t,r)&&!e.o(n,r)&&Object.defineProperty(n,r,{enumerable:!0,get:t[r]})},e.o=(n,t)=>Object.prototype.hasOwnProperty.call(n,t),e.nc=void 0,(()=>{function n(n){return Math.floor(Math.random()*n)}function t(t,e){return[n(t),n(e)]}function r(n,t){let e=[];const r=Math.abs(n[0]-t[0]+n[1]-t[1])+1,o=function(n,t){const e=[];if(1==r)return[n];if(n[0]==t[0])if(n[1]>t[1])for(let r=t[1];r<=n[1];r++)e.push([n[0],r]);else for(let r=n[1];r<=t[1];r++)e.push([n[0],r]);else if(n[0]>t[0])for(let r=t[0];r<=n[0];r++)e.push([r,n[1]]);else for(let r=n[0];r<=t[0];r++)e.push([r,n[1]]);return e}(n,t);function i(){return 1==r||n[0]==t[0]?1:0}const a=i(),s=function(){o.sort();const n=o[0],t=o[r-1];let e=[];return 0==i()?(e.push([n[0]-1,n[1]]),e.push([n[0]-1,n[1]-1]),e.push([n[0]-1,n[1]+1]),e.push([t[0]+1,t[1]]),e.push([t[0]+1,t[1]-1]),e.push([t[0]+1,t[1]+1]),o.forEach((n=>{e.push([n[0],n[1]+1]),e.push([n[0],n[1]-1])})),e):(e.push([n[0],n[1]-1]),e.push([n[0]-1,n[1]-1]),e.push([n[0]+1,n[1]-1]),e.push([t[0],t[1]+1]),e.push([t[0]-1,t[1]+1]),e.push([t[0]+1,t[1]+1]),o.forEach((n=>{e.push([n[0]+1,n[1]]),e.push([n[0]-1,n[1]])})),e)}();return{length:r,hitPoints:o,hits:e,adjacent:s,orientation:a,isSunk:function(){return e.length==r},hit:function(n){const t=n.toString();for(let r=0;r<o.length;r++)if(o[r].toString()==t)return e.push(n),!0;return!1}}}function o(n){n.adjacent.forEach((n=>{let t=n[0],e=n[1];t>=0&&t<=9&&e>=0&&e<=9&&document.querySelector(`[x='${t}'][y='${e}']`).classList.add("adjacent")}))}function i(n){n.adjacent.forEach((n=>{let t=n[0],e=n[1];t>=0&&t<=9&&e>=0&&e<=9&&document.querySelector(`[x='${t}'][y='${e}']`).classList.add("adjacent")})),n.hitPoints.forEach((n=>{let t=n[0],e=n[1];document.querySelector(`[x='${t}'][y='${e}']`).classList.add("active")}))}var a=e(379),s=e.n(a),c=e(795),u=e.n(c),l=e(569),p=e.n(l),d=e(565),A=e.n(d),h=e(216),f=e.n(h),g=e(589),m=e.n(g),v=e(426),y={};y.styleTagTransform=m(),y.setAttributes=A(),y.insert=p().bind(null,"head"),y.domAPI=u(),y.insertStyleElement=f(),s()(v.Z,y),v.Z&&v.Z.locals&&v.Z.locals;const x=function(){let e=[],o=[],i=[],a=[],s=[];function c(n,e){if(0==e){const e=t(9-n,9),o=[];return o.push(e[0]+n-1),o.push(e[1]),r(e,o)}const o=t(9,9-n),i=[];return i.push(o[0]),i.push(o[1]+n-1),r(o,i)}function u(n){return!!function(n){for(let t=0;t<n.length;t++){if(o.some((e=>e.toString()==n.hitPoints[t].toString())))return!1;if(i.some((e=>e.toString()==n.hitPoints[t].toString())))return!1}return!0}(n)&&(function(n){n.hitPoints.forEach((n=>{o.push(n)})),n.adjacent.forEach((n=>{i.push(n)})),e.push(n)}(n),!0)}function l(n){return e.find((t=>t.hitPoints.find((t=>t.toString()==n.toString()))))}function p(n){return e.findIndex((t=>t.hitPoints.find((t=>t.toString()==n.toString()))))}return{ships:e,shipsC:o,hits:s,misses:a,adjacent:i,placeValidShip:u,findShip:l,findShipIndex:p,removeShip:function(n){const t=p(n),r=l(n);return e.splice(t,1),function(n){n.adjacent.forEach((n=>{let t=i.findIndex((t=>t.toString()==n.toString()));i.splice(t,1)}))}(r),function(n){n.hitPoints.forEach((n=>{let t=o.findIndex((t=>t.toString()==n.toString()));o.splice(t,1)}))}(r),r},nRandomShips:function(t,r){const o=e.length+t;for(;e.length<o;)u(c(r,n(2)))},randomShip:c,sunkAll:function(){return s.length==o.length},receiveAttack:function(n){for(let t=0;t<e.length;t++)if(e[t].hit(n))return void s.push(n);a.push(n)}}}();var C;x.nRandomShips(1,4),x.nRandomShips(2,3),x.nRandomShips(3,2),x.nRandomShips(4,1),function(n){n.shipsC.forEach((n=>{let t=n[0],e=n[1];document.querySelector(`[x='${t}'][y='${e}']`).classList.add("active")}))}(C=x),o(C),function(n){n.ships.forEach((n=>{n.hitPoints.sort();let t=n.hitPoints[0][0],e=n.hitPoints[0][1];const r=30*n.length,o=n.orientation,i=document.querySelector(`[x='${t}'][y='${e}']`),a=document.createElement("div");a.classList.add("drag"),a.setAttribute("draggable","true"),a.setAttribute("orientation",`${n.orientation}`),a.setAttribute("length",`${n.length}`),0==o?(a.style.width=`${r}px`,a.style.height="28px"):(a.style.height=`${r}px`,a.style.width="28px"),i.appendChild(a)}))}(C),function(n){let t=null,e=null;document.addEventListener("dragstart",(r=>{t=r.target;let i=t.parentNode.getAttribute("x"),a=t.parentNode.getAttribute("y");var s;e=n.removeShip([i,a]),(s=e).adjacent.forEach((n=>{let t=n[0],e=n[1];t>=0&&t<=9&&e>=0&&e<=9&&document.querySelector(`[x='${t}'][y='${e}']`).classList.remove("adjacent")})),s.hitPoints.forEach((n=>{let t=n[0],e=n[1];document.querySelector(`[x='${t}'][y='${e}']`).classList.remove("active")})),o(n)})),document.addEventListener("dragover",(n=>{n.preventDefault()})),document.addEventListener("drop",(o=>{o.preventDefault();let a=o.target;"drag"==a.className&&(a=a.parentNode);const s=function(n,t,e){let o=[];return 0==e?(o.push(n[0]+t-1),o.push(n[1]),r(n,o)):(o.push(n[0]),o.push(n[1]+t-1),r(n,o))}([parseInt(a.getAttribute("x")),parseInt(a.getAttribute("y"))],parseInt(t.getAttribute("length")),parseInt(t.getAttribute("orientation")));n.placeValidShip(s)?(t.parentNode.removeChild(t),a.appendChild(t),i(s)):(i(e),n.placeValidShip(e))}))}(C),console.log(x)})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,