(()=>{"use strict";var n={426:(n,t,e)=>{e.d(t,{Z:()=>c});var o=e(537),r=e.n(o),i=e(645),a=e.n(i)()(r());a.push([n.id,"body {\n    font-family: Arial, Helvetica, sans-serif;\n}\n\n#title {\n    margin: 30px 50px;\n}\n\n#title > h1 {\n    font-size: 3.2rem;\n    margin: 0;\n}\n\n#title > p {\n    margin: 0 3px 0;\n}\n\n#game-container {\n    display: flex;\n    gap: 150px;\n    justify-content: center;\n}\n\n.cell-content {\n    width: 28px;\n    height: 28px;\n    z-index: 1;\n    background-color: #E5F3FF;\n}\n\n.cell-content.attacked {\n    background-color: #E5F3FF !important;\n}\n\n.cell-content.attacked.active {\n    background-color: #1490FD !important;\n}\n\n.cell-content.active{\n    -webkit-box-shadow:inset 0px 0px 0px 2px #1490FD;\n    -moz-box-shadow:inset 0px 0px 0px 2px #1490FD;\n    box-shadow:inset 0px 0px 0px 2px #1490FD;\n}\n\n.drag {\n    border: 2px solid #1490FD;\n    position: absolute;\n    z-index: 2;\n    margin: -2px;\n    background-color: #C8E4FD;\n}\n\n.drag:hover {\n    cursor: move;\n}\n\ntable {\n    margin: 50px auto 30px auto;\n    border-collapse: collapse;\n    background-color: white;\n}\n\n.active, .adjacent {\n    background-color: white;\n}\n\ntd {\n    border: 1px solid #C8E4FD;\n}\n\n#selection {\n    display: flex;\n    justify-content: center;\n    gap: 30px;\n    width: 320px;\n    height: 40px;\n    margin: auto;\n}\n\nbutton {\n    border: none;\n    border-radius: 0;\n    padding: 10px;\n\n}\n\n#ai-container {\n    display: none;\n}\n\n#blocker {\n    z-index: -1;\n    background-color: lightgrey;\n    opacity: 50%;\n    width: 310px;\n    height: 310px;\n    position: absolute;\n    margin-top: 50px;\n}\n\n.ai-cell {\n    width: 28px;\n    height: 28px;\n}\n\n.ai-cell:hover{\n    cursor: crosshair;\n    -webkit-box-shadow:inset 0px 0px 0px 2px #1490FD;\n    -moz-box-shadow:inset 0px 0px 0px 2px #1490FD;\n    box-shadow:inset 0px 0px 0px 2px #1490FD;\n}\n\n.attacked:hover {\n    cursor: default !important;\n    background-color: #E5F3FF !important;\n}\n\n.attacked.contains-ship:hover {\n    cursor: default !important;\n    background-color: #1490FD !important;\n}\n\n.ai-cell.attacked {\n    background-color: #E5F3FF;\n}\n\n.ai-cell.contains-ship {\n    background-color: white;\n}\n\n.ai-cell.attacked.contains-ship {\n    background-color:  #1490FD;\n}","",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAAA;IACI,yCAAyC;AAC7C;;AAEA;IACI,iBAAiB;AACrB;;AAEA;IACI,iBAAiB;IACjB,SAAS;AACb;;AAEA;IACI,eAAe;AACnB;;AAEA;IACI,aAAa;IACb,UAAU;IACV,uBAAuB;AAC3B;;AAEA;IACI,WAAW;IACX,YAAY;IACZ,UAAU;IACV,yBAAyB;AAC7B;;AAEA;IACI,oCAAoC;AACxC;;AAEA;IACI,oCAAoC;AACxC;;AAEA;IACI,gDAAgD;IAChD,6CAA6C;IAC7C,wCAAwC;AAC5C;;AAEA;IACI,yBAAyB;IACzB,kBAAkB;IAClB,UAAU;IACV,YAAY;IACZ,yBAAyB;AAC7B;;AAEA;IACI,YAAY;AAChB;;AAEA;IACI,2BAA2B;IAC3B,yBAAyB;IACzB,uBAAuB;AAC3B;;AAEA;IACI,uBAAuB;AAC3B;;AAEA;IACI,yBAAyB;AAC7B;;AAEA;IACI,aAAa;IACb,uBAAuB;IACvB,SAAS;IACT,YAAY;IACZ,YAAY;IACZ,YAAY;AAChB;;AAEA;IACI,YAAY;IACZ,gBAAgB;IAChB,aAAa;;AAEjB;;AAEA;IACI,aAAa;AACjB;;AAEA;IACI,WAAW;IACX,2BAA2B;IAC3B,YAAY;IACZ,YAAY;IACZ,aAAa;IACb,kBAAkB;IAClB,gBAAgB;AACpB;;AAEA;IACI,WAAW;IACX,YAAY;AAChB;;AAEA;IACI,iBAAiB;IACjB,gDAAgD;IAChD,6CAA6C;IAC7C,wCAAwC;AAC5C;;AAEA;IACI,0BAA0B;IAC1B,oCAAoC;AACxC;;AAEA;IACI,0BAA0B;IAC1B,oCAAoC;AACxC;;AAEA;IACI,yBAAyB;AAC7B;;AAEA;IACI,uBAAuB;AAC3B;;AAEA;IACI,0BAA0B;AAC9B",sourcesContent:["body {\n    font-family: Arial, Helvetica, sans-serif;\n}\n\n#title {\n    margin: 30px 50px;\n}\n\n#title > h1 {\n    font-size: 3.2rem;\n    margin: 0;\n}\n\n#title > p {\n    margin: 0 3px 0;\n}\n\n#game-container {\n    display: flex;\n    gap: 150px;\n    justify-content: center;\n}\n\n.cell-content {\n    width: 28px;\n    height: 28px;\n    z-index: 1;\n    background-color: #E5F3FF;\n}\n\n.cell-content.attacked {\n    background-color: #E5F3FF !important;\n}\n\n.cell-content.attacked.active {\n    background-color: #1490FD !important;\n}\n\n.cell-content.active{\n    -webkit-box-shadow:inset 0px 0px 0px 2px #1490FD;\n    -moz-box-shadow:inset 0px 0px 0px 2px #1490FD;\n    box-shadow:inset 0px 0px 0px 2px #1490FD;\n}\n\n.drag {\n    border: 2px solid #1490FD;\n    position: absolute;\n    z-index: 2;\n    margin: -2px;\n    background-color: #C8E4FD;\n}\n\n.drag:hover {\n    cursor: move;\n}\n\ntable {\n    margin: 50px auto 30px auto;\n    border-collapse: collapse;\n    background-color: white;\n}\n\n.active, .adjacent {\n    background-color: white;\n}\n\ntd {\n    border: 1px solid #C8E4FD;\n}\n\n#selection {\n    display: flex;\n    justify-content: center;\n    gap: 30px;\n    width: 320px;\n    height: 40px;\n    margin: auto;\n}\n\nbutton {\n    border: none;\n    border-radius: 0;\n    padding: 10px;\n\n}\n\n#ai-container {\n    display: none;\n}\n\n#blocker {\n    z-index: -1;\n    background-color: lightgrey;\n    opacity: 50%;\n    width: 310px;\n    height: 310px;\n    position: absolute;\n    margin-top: 50px;\n}\n\n.ai-cell {\n    width: 28px;\n    height: 28px;\n}\n\n.ai-cell:hover{\n    cursor: crosshair;\n    -webkit-box-shadow:inset 0px 0px 0px 2px #1490FD;\n    -moz-box-shadow:inset 0px 0px 0px 2px #1490FD;\n    box-shadow:inset 0px 0px 0px 2px #1490FD;\n}\n\n.attacked:hover {\n    cursor: default !important;\n    background-color: #E5F3FF !important;\n}\n\n.attacked.contains-ship:hover {\n    cursor: default !important;\n    background-color: #1490FD !important;\n}\n\n.ai-cell.attacked {\n    background-color: #E5F3FF;\n}\n\n.ai-cell.contains-ship {\n    background-color: white;\n}\n\n.ai-cell.attacked.contains-ship {\n    background-color:  #1490FD;\n}"],sourceRoot:""}]);const c=a},645:n=>{n.exports=function(n){var t=[];return t.toString=function(){return this.map((function(t){var e="",o=void 0!==t[5];return t[4]&&(e+="@supports (".concat(t[4],") {")),t[2]&&(e+="@media ".concat(t[2]," {")),o&&(e+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),e+=n(t),o&&(e+="}"),t[2]&&(e+="}"),t[4]&&(e+="}"),e})).join("")},t.i=function(n,e,o,r,i){"string"==typeof n&&(n=[[null,n,void 0]]);var a={};if(o)for(var c=0;c<this.length;c++){var s=this[c][0];null!=s&&(a[s]=!0)}for(var u=0;u<n.length;u++){var A=[].concat(n[u]);o&&a[A[0]]||(void 0!==i&&(void 0===A[5]||(A[1]="@layer".concat(A[5].length>0?" ".concat(A[5]):""," {").concat(A[1],"}")),A[5]=i),e&&(A[2]?(A[1]="@media ".concat(A[2]," {").concat(A[1],"}"),A[2]=e):A[2]=e),r&&(A[4]?(A[1]="@supports (".concat(A[4],") {").concat(A[1],"}"),A[4]=r):A[4]="".concat(r)),t.push(A))}},t}},537:n=>{n.exports=function(n){var t=n[1],e=n[3];if(!e)return t;if("function"==typeof btoa){var o=btoa(unescape(encodeURIComponent(JSON.stringify(e)))),r="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(o),i="/*# ".concat(r," */"),a=e.sources.map((function(n){return"/*# sourceURL=".concat(e.sourceRoot||"").concat(n," */")}));return[t].concat(a).concat([i]).join("\n")}return[t].join("\n")}},379:n=>{var t=[];function e(n){for(var e=-1,o=0;o<t.length;o++)if(t[o].identifier===n){e=o;break}return e}function o(n,o){for(var i={},a=[],c=0;c<n.length;c++){var s=n[c],u=o.base?s[0]+o.base:s[0],A=i[u]||0,l="".concat(u," ").concat(A);i[u]=A+1;var p=e(l),d={css:s[1],media:s[2],sourceMap:s[3],supports:s[4],layer:s[5]};if(-1!==p)t[p].references++,t[p].updater(d);else{var h=r(d,o);o.byIndex=c,t.splice(c,0,{identifier:l,updater:h,references:1})}a.push(l)}return a}function r(n,t){var e=t.domAPI(t);return e.update(n),function(t){if(t){if(t.css===n.css&&t.media===n.media&&t.sourceMap===n.sourceMap&&t.supports===n.supports&&t.layer===n.layer)return;e.update(n=t)}else e.remove()}}n.exports=function(n,r){var i=o(n=n||[],r=r||{});return function(n){n=n||[];for(var a=0;a<i.length;a++){var c=e(i[a]);t[c].references--}for(var s=o(n,r),u=0;u<i.length;u++){var A=e(i[u]);0===t[A].references&&(t[A].updater(),t.splice(A,1))}i=s}}},569:n=>{var t={};n.exports=function(n,e){var o=function(n){if(void 0===t[n]){var e=document.querySelector(n);if(window.HTMLIFrameElement&&e instanceof window.HTMLIFrameElement)try{e=e.contentDocument.head}catch(n){e=null}t[n]=e}return t[n]}(n);if(!o)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");o.appendChild(e)}},216:n=>{n.exports=function(n){var t=document.createElement("style");return n.setAttributes(t,n.attributes),n.insert(t,n.options),t}},565:(n,t,e)=>{n.exports=function(n){var t=e.nc;t&&n.setAttribute("nonce",t)}},795:n=>{n.exports=function(n){var t=n.insertStyleElement(n);return{update:function(e){!function(n,t,e){var o="";e.supports&&(o+="@supports (".concat(e.supports,") {")),e.media&&(o+="@media ".concat(e.media," {"));var r=void 0!==e.layer;r&&(o+="@layer".concat(e.layer.length>0?" ".concat(e.layer):""," {")),o+=e.css,r&&(o+="}"),e.media&&(o+="}"),e.supports&&(o+="}");var i=e.sourceMap;i&&"undefined"!=typeof btoa&&(o+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),t.styleTagTransform(o,n,t.options)}(t,n,e)},remove:function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(t)}}}},589:n=>{n.exports=function(n,t){if(t.styleSheet)t.styleSheet.cssText=n;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(n))}}}},t={};function e(o){var r=t[o];if(void 0!==r)return r.exports;var i=t[o]={id:o,exports:{}};return n[o](i,i.exports,e),i.exports}e.n=n=>{var t=n&&n.__esModule?()=>n.default:()=>n;return e.d(t,{a:t}),t},e.d=(n,t)=>{for(var o in t)e.o(t,o)&&!e.o(n,o)&&Object.defineProperty(n,o,{enumerable:!0,get:t[o]})},e.o=(n,t)=>Object.prototype.hasOwnProperty.call(n,t),e.nc=void 0,(()=>{function n(){const n=document.querySelector("#blocker"),t=n.getAttribute("active");console.log(t),"0"==t?(n.style.zIndex="10",n.setAttribute("active","1")):(n.setAttribute("active","0"),n.style.zIndex="-1")}function t(n,t){const e=n[0],o=n[1];document.querySelector(`[x='${e}'][y='${o}']`).classList.add("attacked");const r=t.findShip(n);r&&function(n){if(n.isSunk()){const t=document.querySelector("#player-container");n.adjacent.forEach((n=>{const e=n[0],o=n[1];e>=0&&e<=9&&o>=0&&o<=9&&t.querySelector(`[x='${e}'][y='${o}']`).classList.add("attacked")}))}}(r)}async function o(e,o){document.querySelector("#ai-container").style.display="block",document.querySelector("#selection").style.display="none",document.querySelectorAll(".drag").forEach((n=>{n.remove()})),document.querySelectorAll(".cell-content").forEach((n=>{n.style.backgroundColor="white"})),o.shipsC.forEach((n=>{const t=n[0],e=n[1];document.querySelector("#ai-container").querySelector(`[x='${t}'][y='${e}']`).classList.add("contains-ship")}));const r=function(e,o){const r=o;function a(n){const t=e.hits.some((t=>t.toString()==n.toString())),o=e.misses.some((t=>t.toString()==n.toString()));return!t&&!o}function c(){let n=i(9,9);for(;!a(n);)n=i(9,9);return n}return{board:r,attack:c,AITurn:async function(){let o=c(),i=e.receiveAttack(o);for(await new Promise((n=>setTimeout(n,500))),t(o,e);i&&!r.sunkAll();)console.log("infinite loop"),o=c(),i=e.receiveAttack(o),await new Promise((n=>setTimeout(n,500))),t(o,e);await new Promise((n=>setTimeout(n,500))),n()}}}(e,o);!function(t,e){document.querySelectorAll(".ai-cell").forEach((o=>{o.addEventListener("click",(()=>{const r=[parseInt(o.getAttribute("x"),10),parseInt(o.getAttribute("y"),10)];t.receiveAttack(r),o.classList.add("attacked"),"ai-cell contains-ship attacked"==o.classList?function(n){if(n.isSunk()){const t=document.querySelector("#ai-container");n.adjacent.forEach((n=>{const e=n[0],o=n[1];if(e>=0&&e<=9&&o>=0&&o<=9){const n=t.querySelector(`[x='${e}'][y='${o}']`),r=n.cloneNode(!0);n.parentNode.replaceChild(r,n),r.classList.add("attacked")}}))}}(t.findShip(r)):(n(),e.AITurn())}),{once:!0})}))}(o,r)}function r(n){return Math.floor(Math.random()*n)}function i(n,t){return[r(n),r(t)]}function a(n,t){const e=[],o=Math.abs(n[0]-t[0]+n[1]-t[1])+1,r=function(){const e=[];if(1==o)return[n];if(n[0]==t[0])if(n[1]>t[1])for(let o=t[1];o<=n[1];o++)e.push([n[0],o]);else for(let o=n[1];o<=t[1];o++)e.push([n[0],o]);else if(n[0]>t[0])for(let o=t[0];o<=n[0];o++)e.push([o,n[1]]);else for(let o=n[0];o<=t[0];o++)e.push([o,n[1]]);return e}();function i(){return 1==o||n[0]==t[0]?1:0}const a=i(),s=function(){r.sort();const n=r[0],t=r[o-1],e=[];return 0==i()?(e.push([n[0]-1,n[1]]),e.push([n[0]-1,n[1]-1]),e.push([n[0]-1,n[1]+1]),e.push([t[0]+1,t[1]]),e.push([t[0]+1,t[1]-1]),e.push([t[0]+1,t[1]+1]),r.forEach((n=>{e.push([n[0],n[1]+1]),e.push([n[0],n[1]-1])})),e):(e.push([n[0],n[1]-1]),e.push([n[0]-1,n[1]-1]),e.push([n[0]+1,n[1]-1]),e.push([t[0],t[1]+1]),e.push([t[0]-1,t[1]+1]),e.push([t[0]+1,t[1]+1]),r.forEach((n=>{e.push([n[0]+1,n[1]]),e.push([n[0]-1,n[1]])})),e)}();return{length:o,hitPoints:r,hits:e,adjacent:s,orientation:a,rotate:function(){return c(n,o,0==a?1:0)},isSunk:function(){return e.length===o},hit:function(n){const t=n.toString();for(let o=0;o<r.length;o++)if(r[o].toString()==t)return e.push(n),!0;return!1}}}function c(n,t,e){const o=[];return 0==e?(o.push(n[0]+t-1),o.push(n[1]),a(n,o)):(o.push(n[0]),o.push(n[1]+t-1),a(n,o))}function s(){const n=[],t=[],e=[],o=[],c=[];function s(n,t){if(0==t){const t=i(9-n,9),e=[];return e.push(t[0]+n-1),e.push(t[1]),a(t,e)}const e=i(9,9-n),o=[];return o.push(e[0]),o.push(e[1]+n-1),a(e,o)}function u(o){return!!function(n){for(let o=0;o<n.length;o++){if(t.some((t=>t.toString()==n.hitPoints[o].toString())))return!1;if(e.some((t=>t.toString()==n.hitPoints[o].toString())))return!1}for(let t=0;t<n.length;t++)if(n.hitPoints[t].some((n=>n<0||n>9)))return!1;return!0}(o)&&(function(o){o.hitPoints.forEach((n=>{t.push(n)})),o.adjacent.forEach((n=>{e.push(n)})),n.push(o)}(o),!0)}function A(t){return n.find((n=>n.hitPoints.find((n=>n.toString()==t.toString()))))}function l(t){return n.findIndex((n=>n.hitPoints.find((n=>n.toString()==t.toString()))))}return{ships:n,shipsC:t,hits:c,misses:o,adjacent:e,placeValidShip:u,findShip:A,findShipIndex:l,removeShip:function(o){const r=l(o),i=A(o);return n.splice(r,1),function(n){n.adjacent.forEach((n=>{const t=e.findIndex((t=>t.toString()==n.toString()));e.splice(t,1)}))}(i),function(n){n.hitPoints.forEach((n=>{const e=t.findIndex((t=>t.toString()==n.toString()));t.splice(e,1)}))}(i),i},nRandomShips:function(t,e){const o=n.length+t;for(;n.length<o;)u(s(e,r(2)))},randomShip:s,sunkAll:function(){return c.length==t.length},receiveAttack:function(t){for(let e=0;e<n.length;e++)if(n[e].hit(t))return c.push(t),n[e].isSunk()&&n[e].adjacent.forEach((n=>{o.push(n)})),1;return o.push(t),0}}}function u(n){n.adjacent.forEach((n=>{const t=n[0],e=n[1];t>=0&&t<=9&&e>=0&&e<=9&&document.querySelector(`[x='${t}'][y='${e}']`).classList.add("adjacent")}))}function A(n){n.adjacent.forEach((n=>{const t=n[0],e=n[1];t>=0&&t<=9&&e>=0&&e<=9&&document.querySelector(`[x='${t}'][y='${e}']`).classList.remove("adjacent")})),n.hitPoints.forEach((n=>{const t=n[0],e=n[1];document.querySelector(`[x='${t}'][y='${e}']`).classList.remove("active")}))}function l(n){n.adjacent.forEach((n=>{const t=n[0],e=n[1];t>=0&&t<=9&&e>=0&&e<=9&&document.querySelector(`[x='${t}'][y='${e}']`).classList.add("adjacent")})),n.hitPoints.forEach((n=>{const t=n[0],e=n[1];document.querySelector(`[x='${t}'][y='${e}']`).classList.add("active")}))}var p=e(379),d=e.n(p),h=e(795),f=e.n(h),x=e(569),g=e.n(x),m=e(565),C=e.n(m),y=e(216),b=e.n(y),I=e(589),v=e.n(I),S=e(426),B={};B.styleTagTransform=v(),B.setAttributes=C(),B.insert=g().bind(null,"head"),B.domAPI=f(),B.insertStyleElement=b(),d()(S.Z,B),S.Z&&S.Z.locals&&S.Z.locals;const E=s();E.nRandomShips(1,4),E.nRandomShips(2,3),E.nRandomShips(3,2),E.nRandomShips(4,1);const k=s();var w,F,D;k.nRandomShips(1,4),k.nRandomShips(2,3),k.nRandomShips(3,2),k.nRandomShips(4,1),function(n){n.shipsC.forEach((n=>{const t=n[0],e=n[1];document.querySelector(`[x='${t}'][y='${e}']`).classList.add("active")}))}(w=E),u(w),function(n){n.ships.forEach((n=>{n.hitPoints.sort();const t=n.hitPoints[0][0],e=n.hitPoints[0][1],o=30*n.length,{orientation:r}=n,i=document.querySelector(`[x='${t}'][y='${e}']`),a=document.createElement("div");a.classList.add("drag"),a.setAttribute("draggable","true"),a.setAttribute("orientation",`${n.orientation}`),a.setAttribute("length",`${n.length}`),0==r?(a.style.width=`${o}px`,a.style.height="28px"):(a.style.height=`${o}px`,a.style.width="28px"),i.appendChild(a)}))}(w),function(n){let t=null,e=null;document.addEventListener("dragstart",(o=>{t=o.target;const r=parseInt(t.parentNode.getAttribute("x"),10),i=parseInt(t.parentNode.getAttribute("y"),10);e=n.removeShip([r,i]),A(e),u(n)})),document.addEventListener("dragover",(n=>{n.preventDefault()})),document.addEventListener("drop",(o=>{o.preventDefault();let r=o.target;"drag"==r.className&&(r=r.parentNode);const i=c([parseInt(r.getAttribute("x"),10),parseInt(r.getAttribute("y"),10)],parseInt(t.getAttribute("length"),10),parseInt(t.getAttribute("orientation"),10));n.placeValidShip(i)?(t.parentNode.removeChild(t),r.appendChild(t),l(i)):(l(e),n.placeValidShip(e))}))}(w),function(n){document.querySelectorAll(".drag").forEach((t=>{t.addEventListener("click",(t=>{const e=t.target,o=parseInt(e.parentNode.getAttribute("x"),10),r=parseInt(e.parentNode.getAttribute("y"),10),i=c([o,r],parseInt(e.getAttribute("length"),10),parseInt(e.getAttribute("orientation"),10)),a=i.rotate();n.removeShip([o,r]),n.placeValidShip(a)?(A(i),l(a),e.setAttribute("orientation",`${a.orientation}`),0==a.orientation?(e.style.width=30*a.length+"px",e.style.height="28px"):(e.style.height=30*a.length+"px",e.style.width="28px")):n.placeValidShip(i)}))}))}(w),F=E,D=k,document.querySelector("#start").addEventListener("click",(()=>{o(F,D)}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,